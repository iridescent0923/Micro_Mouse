;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include "switch.h"
;#include "LED.h"
;
;// Declare your global variables here
;    struct Buttons{
;        char SW1;
;        char SW2;
;}Button;
;//Buttons Button;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0004 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 0010     // Place your code here
; 0004 0011     Button.SW1 = TRUE;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0004 0012 
; 0004 0013 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0004 0017 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0004 0018     // Place your code here
; 0004 0019     Button.SW2 = TRUE;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0004 001A 
; 0004 001B }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;
;char SW1(void)
; 0004 001F {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0004 0020 char ret;
; 0004 0021 ret = Button.SW1;
;PCODE: $0000001E VOL: 0
;	ret -> R17
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0004 0022 Button.SW1 = FALSE;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0004 0023 return ret;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0004 0024 }
;PCODE: $00000026 VOL: 0
;
;char SW2(void)
; 0004 0027 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0004 0028 char ret;
; 0004 0029 ret = Button.SW2;
;PCODE: $00000029 VOL: 0
;	ret -> R17
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0004 002A Button.SW2 = FALSE;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0004 002B return ret;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0004 002C }
;PCODE: $00000033 VOL: 0
;
;
;
;
;void InitializeSwitch(void)
; 0004 0032 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0004 0033 // ½ºÀ§Ä¡ PORTD 0,1
; 0004 0034 PORTD &= 0xfc;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0004 0035 DDRD &= 0xfc;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0004 0036 // External Interrupt(s) initialization
; 0004 0037 // INT0: On
; 0004 0038 // INT0 Mode: Falling Edge
; 0004 0039 // INT1: On
; 0004 003A // INT1 Mode: Falling Edge
; 0004 003B // INT2: Off
; 0004 003C // INT3: Off
; 0004 003D // INT4: Off
; 0004 003E // INT5: Off
; 0004 003F // INT6: Off
; 0004 0040 // INT7: Off
; 0004 0041 EICRA=0x0A;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0004 0042 EICRB=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0004 0043 EIMSK=0x03;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0004 0044 EIFR=0x03;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0004 0045 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
