;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <math.h>
;
;
;#include "StepMotor.h"
;#include "Sensor.h"
;#include "UART.h"
;#include "Algorithm.h"
;#include "LED.h"
;
;#define PI       3.14159265358979323846
;//TCNT const
;#define TCNT_REF 65385
;#define TCNT_LOW 65300
;
;#define TCNT_REF_FOR_RIGHT_TURN 65387
;#define TCNT_REF_FOR_LEFT_TURN 65377
;
;#define TCNT_TURN 65150
;#define TCNT_TURN_LEFT 65135
;
;//STEP const
;#define STEP_RIGHT 190
;#define STEP_LEFT 220
;
;//extern unsigned int MAP_COUNTER;
;
;// Declare your global variables here
;char rotateR[8] = {0b1001,0b0001,0b0101,0b0100,0b0110,0b0010,0b1010,0b1000};

	.DSEG
;//R모터가 전진하기 위한 8step
;char rotateL[8] = {0b1001,0b1000,0b1010,0b0010,0b0110,0b0100,0b0101,0b0001};
;//L모터가 전진하기 위한 8step
;int LeftstepCount, RightstepCount; // rotateR과 rotateL의 각각 스텝이 모터에 순서대로 입력되도록 Count
;unsigned int VelocityLeftmotorTCNT1, VelocityRightmotorTCNT3; // 왼쪽과 오른쪽 모터의 TCNT 속도
;unsigned char direction_control; // 인터럽트 루틴에 방향정보를 전달하기 위한 전역변수
;//============================================ MAP
;unsigned int MAPP[500]={1};
;unsigned int counter_=0;
;
;// =====================================
;
;
;
;int L_motorspeed=0;
;int R_motorspeed=0;
;int sensor_value=0;
;
;//adjust
;int adjLeftSensor, adjRightSensor;
;int adjflagcnt = 0;
;
;unsigned int vel_counter_high_L, vel_counter_high_R, vel_counter_high = 65385;
;// Global variable for passing direction information to interrupt routine
;unsigned char direction_control;
;
;int ACCEL_CONTROL=0;
;eeprom extern unsigned int StandardSensor[3];
;eeprom extern unsigned int CenterStandardSensor[3];
;
;struct {
;int nStep4perBlock; // 한 블록 이동시 필요한 모터회전 스텝 정보
;int nStep4Turn90; // 90도 턴 이동시 필요한 모터회전 스텝 정보
;} Information;
;struct {
;char LmotorRun; // 왼쪽 모터가 회전했는지에 대한 Flag
;char RmotorRun; // 오른쪽 모터가 회전했는지에 대한 Flag
;} Flag;
;
;
;void Acceleration(int mode)
; 0002 0049 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 004A     int LStepCount = 0, RStepCount = 0;
; 0002 004B     TCCR1B = 0x04; //TIMER SET
;PCODE: $0000000F VOL: 0
;	mode -> Y+4
;	LStepCount -> R16,R17
;	RStepCount -> R18,R19
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0002 004C     TCCR3B = 0x04;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 004D     direction_control = mode;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 004E     Flag.LmotorRun = FALSE;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 004F     Flag.RmotorRun = FALSE;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 0050 switch(mode)
;PCODE: $0000001F VOL: 0
; 0002 0051     {
; 0002 0052 
; 0002 0053     }
;PCODE: $00000020 VOL: 0
; 0002 0054 
; 0002 0055 
; 0002 0056 }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;
;
;
;
;void Direction(int mode)
; 0002 005D {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0002 005E     int LStepCount = 0, RStepCount = 0;
; 0002 005F     TCCR1B = 0x04; //TIMER SET
;PCODE: $00000027 VOL: 0
;	mode -> Y+4
;	LStepCount -> R16,R17
;	RStepCount -> R18,R19
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0002 0060     TCCR3B = 0x04;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0061     direction_control = mode;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 0062     Flag.LmotorRun = FALSE;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0002 0063     Flag.RmotorRun = FALSE;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0002 0064 switch(mode)
;PCODE: $00000037 VOL: 0
; 0002 0065     {
; 0002 0066     case ACCEL_HALF:  //ACCEL
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0002 0067         {
; 0002 0068         //Information.nStep4perBlock = 1527step(int)
; 0002 0069         // TCNT_ref=65385; //모터의 속도 (65200 ~ 65535)  65400
; 0002 006A 
; 0002 006B         VelocityLeftmotorTCNT1 = TCNT_LOW; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 006C         VelocityRightmotorTCNT3 = TCNT_LOW; // 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0002 006D 
; 0002 006E 
; 0002 006F             while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 0070             {
; 0002 0071                 if(VelocityLeftmotorTCNT1>=TCNT_REF || VelocityRightmotorTCNT3>=TCNT_REF )
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 0072                 {
; 0002 0073                     VelocityLeftmotorTCNT1 = TCNT_REF;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 0074                     VelocityRightmotorTCNT3 = TCNT_REF;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 0075                 }
; 0002 0076                 if(Flag.LmotorRun)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0077                 {
; 0002 0078                     LStepCount++;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0079                     Flag.LmotorRun = FALSE;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 007A                 }
; 0002 007B                 if(Flag.RmotorRun)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0002 007C                 {
; 0002 007D                     RStepCount++;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0002 007E                     Flag.RmotorRun = FALSE;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 007F                 }
; 0002 0080                 if(ACCEL_CONTROL==1200)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 0081                 {
; 0002 0082                     ACCEL_CONTROL=0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0002 0083                     VelocityLeftmotorTCNT1+=2;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0002 0084                     VelocityRightmotorTCNT3+=2;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0085                 }
; 0002 0086                 ACCEL_CONTROL++;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 0087             }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0002 0088         }
; 0002 0089         ACCEL_CONTROL=0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0002 008A         break;
;PCODE: $0000007A VOL: 0
; 0002 008B 
; 0002 008C         case DEACCEL_HALF:  //DEACCEL
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0002 008D         {
; 0002 008E         //Information.nStep4perBlock=1527(int)
; 0002 008F         // TCNT_REF 65385 //모터의 속도 (65200 ~ 65535)  65400
; 0002 0090         //TCNT_LOW 65200
; 0002 0091 
; 0002 0092         VelocityLeftmotorTCNT1 = TCNT_REF; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0093         VelocityRightmotorTCNT3 = TCNT_REF; // 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 0094 
; 0002 0095 
; 0002 0096             while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0002 0097             {
; 0002 0098                 if(VelocityLeftmotorTCNT1<=TCNT_LOW || VelocityRightmotorTCNT3<=TCNT_LOW )
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0002 0099                 {
; 0002 009A                     VelocityLeftmotorTCNT1 = TCNT_LOW;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 009B                     VelocityRightmotorTCNT3 = TCNT_LOW;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0002 009C                 }
; 0002 009D                 if(Flag.LmotorRun)
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0002 009E                 {
; 0002 009F                     LStepCount++;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0002 00A0                     Flag.LmotorRun = FALSE;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 00A1                 }
; 0002 00A2                 if(Flag.RmotorRun)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0002 00A3                 {
; 0002 00A4                     RStepCount++;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0002 00A5                     Flag.RmotorRun = FALSE;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0002 00A6                 }
; 0002 00A7                 if(ACCEL_CONTROL==1200)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 00A8                 {
; 0002 00A9                     ACCEL_CONTROL=0;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0002 00AA                     VelocityLeftmotorTCNT1-=1;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0002 00AB                     VelocityRightmotorTCNT3-=1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 00AC                 }
; 0002 00AD                 ACCEL_CONTROL++;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0002 00AE             }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 00AF         }
; 0002 00B0         ACCEL_CONTROL=0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0002 00B1         //VelocityLeftmotorTCNT1 = TCNT_REF; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
; 0002 00B2         //VelocityRightmotorTCNT3 = TCNT_REF; // 오른쪽 모터의 속도 (65200 ~ 65535)
; 0002 00B3 
; 0002 00B4         break;
;PCODE: $000000BE VOL: 0
; 0002 00B5 
; 0002 00B6         case DEACCEL_HALF_STOP:  //DEACCEL
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0002 00B7         {
; 0002 00B8         //Information.nStep4perBlock=1527(int)
; 0002 00B9         // TCNT_REF 65385 //모터의 속도 (65200 ~ 65535)  65400
; 0002 00BA         //TCNT_LOW 65200
; 0002 00BB 
; 0002 00BC         VelocityLeftmotorTCNT1 = TCNT_REF; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0002 00BD         VelocityRightmotorTCNT3 = TCNT_REF; // 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0002 00BE 
; 0002 00BF 
; 0002 00C0             while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0002 00C1             {
; 0002 00C2                 if(Flag.LmotorRun)
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 00C3                 {
; 0002 00C4                     LStepCount++;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0002 00C5                     Flag.LmotorRun = FALSE;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0002 00C6                 }
; 0002 00C7                 if(Flag.RmotorRun)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0002 00C8                 {
; 0002 00C9                     RStepCount++;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0002 00CA                     Flag.RmotorRun = FALSE;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0002 00CB                 }
; 0002 00CC                 if(ACCEL_CONTROL==1200)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0002 00CD                 {
; 0002 00CE                     ACCEL_CONTROL=0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 00CF                     VelocityLeftmotorTCNT1-=1;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0002 00D0                     VelocityRightmotorTCNT3-=1;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 00D1                 }
; 0002 00D2                 ACCEL_CONTROL++;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0002 00D3             }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0002 00D4         }
; 0002 00D5         ACCEL_CONTROL=0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0002 00D6         //VelocityLeftmotorTCNT1 = TCNT_REF; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
; 0002 00D7         //VelocityRightmotorTCNT3 = TCNT_REF; // 오른쪽 모터의 속도 (65200 ~ 65535)
; 0002 00D8 
; 0002 00D9         break;
;PCODE: $000000F5 VOL: 0
; 0002 00DA 
; 0002 00DB 
; 0002 00DC         /*
; 0002 00DD         case DEACCEL_WITH_HALF:  //DEACCEL
; 0002 00DE         {
; 0002 00DF 
; 0002 00E0         }
; 0002 00E1         break;
; 0002 00E2 
; 0002 00E3         case NOACCEL:  //NOACCEL
; 0002 00E4         {
; 0002 00E5 
; 0002 00E6         }
; 0002 00E7         break;
; 0002 00E8         */
; 0002 00E9 
; 0002 00EA 
; 0002 00EB 
; 0002 00EC     case ACCEL_HALF_START:  //ACCEL
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0002 00ED         {
; 0002 00EE         //Information.nStep4perBlock=1527(int)
; 0002 00EF         // TCNT_ref=65385; //모터의 속도 (65200 ~ 65535)  65400
; 0002 00F0 
; 0002 00F1         VelocityLeftmotorTCNT1 = 65000; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0002 00F2         VelocityRightmotorTCNT3 = 65000; // 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0002 00F3 
; 0002 00F4 
; 0002 00F5             while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0002 00F6             {
; 0002 00F7                 if(VelocityLeftmotorTCNT1>=TCNT_REF || VelocityRightmotorTCNT3>=TCNT_REF )
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0002 00F8                 {
; 0002 00F9                     VelocityLeftmotorTCNT1 = TCNT_REF;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0002 00FA                     VelocityRightmotorTCNT3 = TCNT_REF;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0002 00FB                 }
; 0002 00FC                 if(Flag.LmotorRun)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0002 00FD                 {
; 0002 00FE                     LStepCount++;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0002 00FF                     Flag.LmotorRun = FALSE;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0002 0100                 }
; 0002 0101                 if(Flag.RmotorRun)
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0002 0102                 {
; 0002 0103                     RStepCount++;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0002 0104                     Flag.RmotorRun = FALSE;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 0105                 }
; 0002 0106 
; 0002 0107                      if(ACCEL_CONTROL==600)
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0002 0108                 {
; 0002 0109                     ACCEL_CONTROL=0;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0002 010A                     VelocityLeftmotorTCNT1+=2;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 010B                     VelocityRightmotorTCNT3+=2;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0002 010C                 }
; 0002 010D                 ACCEL_CONTROL++;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0002 010E 
; 0002 010F 
; 0002 0110             }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0002 0111         }
; 0002 0112         ACCEL_CONTROL=0;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0002 0113 
; 0002 0114         break;
;PCODE: $00000139 VOL: 0
; 0002 0115 
; 0002 0116     case TURN_RIGHT:   //RIGHT
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0002 0117 
; 0002 0118     MAPP[counter_]=TURN_RIGHT;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0002 0119     counter_++;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0002 011A     VelocityLeftmotorTCNT1 = TCNT_REF_FOR_RIGHT_TURN+10; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0002 011B     VelocityRightmotorTCNT3 = TCNT_TURN+45; // 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0002 011C     while(LStepCount<(STEP_RIGHT) || RStepCount<(STEP_RIGHT))
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0002 011D     {
; 0002 011E     //Information.nStep4perBlock
; 0002 011F 
; 0002 0120         if(Flag.LmotorRun)
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0002 0121         {
; 0002 0122             LStepCount++;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0002 0123             Flag.LmotorRun = FALSE;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0002 0124         }
; 0002 0125         if(Flag.RmotorRun)
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0002 0126         {
; 0002 0127             RStepCount++;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0002 0128             Flag.RmotorRun = FALSE;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0002 0129         }
; 0002 012A     }
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0002 012B     break;
;PCODE: $00000168 VOL: 0
; 0002 012C 
; 0002 012D 
; 0002 012E 
; 0002 012F     case TURN_LEFT:   //LEFT
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0002 0130 
; 0002 0131     MAPP[counter_]=TURN_LEFT;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0002 0132     counter_++;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0002 0133     VelocityLeftmotorTCNT1 =TCNT_TURN_LEFT ; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0002 0134     VelocityRightmotorTCNT3 = TCNT_REF_FOR_LEFT_TURN; // 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0002 0135     while(LStepCount<(STEP_LEFT) || RStepCount<(STEP_LEFT))
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0002 0136     {
; 0002 0137 
; 0002 0138         if(Flag.LmotorRun)
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0002 0139         {
; 0002 013A             LStepCount++;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0002 013B             Flag.LmotorRun = FALSE;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0002 013C         }
; 0002 013D         if(Flag.RmotorRun)
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0002 013E         {
; 0002 013F             RStepCount++;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0002 0140             Flag.RmotorRun = FALSE;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0002 0141         }
; 0002 0142     }
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0002 0143     break;
;PCODE: $00000197 VOL: 0
; 0002 0144 
; 0002 0145 
; 0002 0146     case FORWARD:  //FORWARD
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0002 0147     while(LStepCount<Information.nStep4perBlock || RStepCount<Information.nStep4perBlock)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0002 0148     {
; 0002 0149     adjustmouse();
;PCODE: $000001A4 VOL: 0
; 0002 014A     if(Flag.LmotorRun)
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0002 014B     {
; 0002 014C         LStepCount++;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0002 014D         Flag.LmotorRun = FALSE;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0002 014E     }
; 0002 014F     if(Flag.RmotorRun)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0002 0150     {
; 0002 0151         RStepCount++;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0002 0152         Flag.RmotorRun = FALSE;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0002 0153     }
; 0002 0154     }
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0002 0155     break;
;PCODE: $000001B9 VOL: 0
; 0002 0156 
; 0002 0157 
; 0002 0158 
; 0002 0159     case HALF:        //HALF
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0002 015A     LED_ON(LED4);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0002 015B     while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0002 015C     {
; 0002 015D 
; 0002 015E     adjustmouse();
;PCODE: $000001C9 VOL: 0
; 0002 015F 
; 0002 0160     //UART
; 0002 0161 
; 0002 0162     if(Flag.LmotorRun)
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0002 0163     {
; 0002 0164         LStepCount++;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0002 0165         Flag.LmotorRun = FALSE;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0002 0166     }
; 0002 0167     if(Flag.RmotorRun)
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0002 0168     {
; 0002 0169         RStepCount++;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0002 016A         Flag.RmotorRun = FALSE;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0002 016B     }
; 0002 016C     }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0002 016D     break;
;PCODE: $000001DE VOL: 0
; 0002 016E 
; 0002 016F     case HALF_HALF:        //HALF
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0002 0170     LED_ON(LED4);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0002 0171     while(LStepCount<(Information.nStep4perBlock>>2) || RStepCount<(Information.nStep4perBlock>>2))
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0002 0172     {
; 0002 0173 
; 0002 0174     adjustmouse();
;PCODE: $000001EE VOL: 0
; 0002 0175 
; 0002 0176     //UART
; 0002 0177 
; 0002 0178     if(Flag.LmotorRun)
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0002 0179     {
; 0002 017A         LStepCount++;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0002 017B         Flag.LmotorRun = FALSE;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0002 017C     }
; 0002 017D     if(Flag.RmotorRun)
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0002 017E     {
; 0002 017F         RStepCount++;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0002 0180         Flag.RmotorRun = FALSE;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0002 0181     }
; 0002 0182     }
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0002 0183     break;
;PCODE: $00000203 VOL: 0
; 0002 0184 
; 0002 0185     case HALF_HALF_HALF:
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0002 0186     LED_ON(LED4);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0002 0187 
; 0002 0188     MAPP[counter_]=HALF_HALF_HALF;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0002 0189     counter_++;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0002 018A 
; 0002 018B     while(LStepCount<(Information.nStep4perBlock>>3) || RStepCount<(Information.nStep4perBlock>>3))
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0002 018C     {
; 0002 018D 
; 0002 018E     adjustmouse();
;PCODE: $0000021D VOL: 0
; 0002 018F 
; 0002 0190     //UART
; 0002 0191 
; 0002 0192     if(Flag.LmotorRun)
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0002 0193     {
; 0002 0194         LStepCount++;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0002 0195         Flag.LmotorRun = FALSE;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0002 0196     }
; 0002 0197     if(Flag.RmotorRun)
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0002 0198     {
; 0002 0199         RStepCount++;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0002 019A         Flag.RmotorRun = FALSE;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0002 019B     }
; 0002 019C     }
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0002 019D     break;
;PCODE: $00000232 VOL: 0
; 0002 019E 
; 0002 019F 
; 0002 01A0     case LEFT:    //LEFT
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0002 01A1     case RIGHT:   //RIGHT
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0002 01A2     MAPP[counter_]=0;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0002 01A3     counter_++;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0002 01A4     while(LStepCount<Information.nStep4Turn90 || RStepCount<Information.nStep4Turn90)
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0002 01A5     {
; 0002 01A6     if(Flag.LmotorRun)
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0002 01A7     {
; 0002 01A8         LStepCount++;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0002 01A9         Flag.LmotorRun = FALSE;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0002 01AA     }
; 0002 01AB     if(Flag.RmotorRun)
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0002 01AC     {
; 0002 01AD         RStepCount++;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0002 01AE         Flag.RmotorRun = FALSE;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0002 01AF     }
; 0002 01B0     }
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0002 01B1     break;
;PCODE: $00000264 VOL: 0
; 0002 01B2 
; 0002 01B3 
; 0002 01B4 
; 0002 01B5     case BACK:    //BACK
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0002 01B6     while(LStepCount<(Information.nStep4Turn90*2) || RStepCount<(Information.nStep4Turn90*2))
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0002 01B7     {
; 0002 01B8     if(Flag.LmotorRun)
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0002 01B9     {
; 0002 01BA         LStepCount++;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0002 01BB         Flag.LmotorRun = FALSE;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0002 01BC     }
; 0002 01BD     if(Flag.RmotorRun)
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0002 01BE     {
; 0002 01BF         RStepCount++;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0002 01C0         Flag.RmotorRun = FALSE;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0002 01C1     }
; 0002 01C2     }
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0002 01C3         break;
;PCODE: $00000287 VOL: 0
; 0002 01C4     }
;PCODE: $00000288 VOL: 0
; 0002 01C5     TCCR1B = 0x00;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0002 01C6     TCCR3B = 0x00;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0002 01C7 }
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;
;void adjustmouse(void){				//직진 보정 알고리즘
; 0002 01C9 void adjustmouse(void){
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0002 01CA 
; 0002 01CB     vel_counter_high=65385;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0002 01CC     adjLeftSensor = readSensor(LEFT_SENSOR); 		//왼쪽 센서값 읽어서 adjleft에 저장
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0002 01CD     adjRightSensor = readSensor(RIGHT_SENSOR);	//우측 센서값 읽어서 adjright에 저장
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0002 01CE     //printf("adj_left:%d  adj_right:%d   \ncenter_standard_left:%d     center_standard_left:%d\n",adjLeftSensor,adjRightSensor,StandardSensor[1],StandardSensor[2]);
; 0002 01CF 
; 0002 01D0    /* vel_counter_high_L = VelocityLeftmotorTCNT1;	//현재 바퀴속도값을 변수 counter에 각각 저장(65200 ~ 65535)
; 0002 01D1     vel_counter_high_R = VelocityRightmotorTCNT3;  */
; 0002 01D2 
; 0002 01D3     // If none of the left and right walls are present
; 0002 01D4     if((adjRightSensor-27<StandardSensor[2]) || (adjLeftSensor-10<StandardSensor[0]))
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0002 01D5     {	//좌우 벽중 하나가 없을 시 무조건 등속( 반대로 얘기하면 양쪽에 벽이 있어야만 좌우보정 start)
; 0002 01D6 
; 0002 01D7         vel_counter_high_L = vel_counter_high;  // Equal velocity
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0002 01D8         vel_counter_high_R = vel_counter_high;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0002 01D9     }
; 0002 01DA     else{							//좌우 벽둘다 존재 할 경우 보정 시작
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0002 01DB         // If the right wall is far
; 0002 01DC         if(adjRightSensor-27 < CenterStandardSensor[2]){		//우측 벽이 더멀면  => 정중앙보다 왼쪽에 있다
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0002 01DD         //LED_ON(LED4);///////////////////////////////////////
; 0002 01DE        /* printf("%d  \t%d \t %d \t %d\r\n",adjRightSensor,readSensor(RIGHT_SENSOR),CenterStandardSensor[0],CenterStandardSensor[2]);
; 0002 01DF               delay_ms(1000);*/
; 0002 01E0 
; 0002 01E1 
; 0002 01E2 
; 0002 01E3             vel_counter_high_L+=1;				//좌측 속도 높이고
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0002 01E4             vel_counter_high_R-=1;				//우측 속도 down	1의 값을 높이면 변하는 tempo를 더 빠르게 할 수 있음
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0002 01E5             if(vel_counter_high_L > vel_counter_high+20){		//속도 변화량의 최대값 설정 아무리 높아도 +20정도까지만 되게
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0002 01E6                 vel_counter_high_L = vel_counter_high+20;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0002 01E7             }
; 0002 01E8             if(vel_counter_high_R < (vel_counter_high-20)){
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0002 01E9                 vel_counter_high_R = (vel_counter_high-20);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0002 01EA             }
; 0002 01EB         }else{
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0002 01EC             adjflagcnt++;					//카운트 1증가
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0002 01ED         }
;PCODE: $000002DA VOL: 0
; 0002 01EE         // If the left wall is far
; 0002 01EF         if(adjLeftSensor-10 < CenterStandardSensor[0]){		//좌측벽도 마찬가지로 진행
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0002 01F0             vel_counter_high_L-=1;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0002 01F1             vel_counter_high_R+=1;
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0002 01F2             if(vel_counter_high_R > vel_counter_high+20){
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0002 01F3                 vel_counter_high_R = vel_counter_high+20;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0002 01F4             }
; 0002 01F5             if(vel_counter_high_L < (vel_counter_high-20)){
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0002 01F6                 vel_counter_high_L = (vel_counter_high-20);
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0002 01F7             }
; 0002 01F8         }else{
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0002 01F9             adjflagcnt++;					//카운트 1중가
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0002 01FA         }
;PCODE: $00000300 VOL: 0
; 0002 01FB         // If both left and right walls are not far away
; 0002 01FC         if(adjflagcnt==2){					//둘다 보정 후에 값 입력
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0002 01FD             vel_counter_high_L = vel_counter_high;  // Equal velocity
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0002 01FE             vel_counter_high_R = vel_counter_high;
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0002 01FF         }
; 0002 0200     }
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0002 0201     VelocityLeftmotorTCNT1 = vel_counter_high_L;
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0002 0202     VelocityRightmotorTCNT3 = vel_counter_high_R;
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0002 0203 
; 0002 0204 }
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;
;
;
;
;
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0002 020C {
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0002 020D // Place your code here
; 0002 020E switch(direction_control)
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0002 020F {
; 0002 0210     case LEFT:
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0002 0211     PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0002 0212     PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0002 0213     LeftstepCount--;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0002 0214     if(LeftstepCount < 0)
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0002 0215     LeftstepCount = sizeof(rotateL)-1;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0002 0216     break;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0002 0217 
; 0002 0218     case RIGHT:
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0002 0219     case BACK:
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0002 021A     case FORWARD:
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0002 021B     case HALF:
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0002 021C     case ACCEL_HALF:
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0002 021D     case DEACCEL_HALF:
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0002 021E     case DEACCEL_HALF_STOP:  //DEACCEL
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0002 021F     case ACCEL_HALF_START:
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0002 0220     case TURN_RIGHT:   //RIGHT
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0002 0221     case TURN_LEFT:
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0002 0222     case HALF_HALF:
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0002 0223     case HALF_HALF_HALF:
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0002 0224     PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0002 0225     PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0002 0226     LeftstepCount++;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0002 0227     LeftstepCount %= sizeof(rotateL);
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0002 0228     break;
;PCODE: $00000385 VOL: 0
; 0002 0229 }
;PCODE: $00000386 VOL: 0
; 0002 022A 
; 0002 022B Flag.LmotorRun = TRUE;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0002 022C TCNT1H = VelocityLeftmotorTCNT1 >> 8;
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0002 022D TCNT1L = VelocityLeftmotorTCNT1 & 0xff;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0002 022E }
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;
;
;
;
;// Timer 3 overflow interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0002 0235 {
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0002 0236 // Place your code here
; 0002 0237 switch(direction_control)
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0002 0238 {
; 0002 0239 case RIGHT:
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0002 023A case BACK:
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0002 023B PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0002 023C PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0002 023D RightstepCount--;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0002 023E if(RightstepCount < 0)
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0002 023F RightstepCount = sizeof(rotateR)-1;
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0002 0240 break;
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0002 0241 case FORWARD:
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0002 0242 case HALF:
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0002 0243 case LEFT:
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0002 0244 case ACCEL_HALF:
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0002 0245 case DEACCEL_HALF:
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0002 0246 case DEACCEL_HALF_STOP:  //DEACCEL
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0002 0247 case ACCEL_HALF_START:
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0002 0248 case TURN_RIGHT:
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0002 0249 case TURN_LEFT:
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0002 024A case HALF_HALF:
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0002 024B case HALF_HALF_HALF:
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0002 024C PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0002 024D PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0002 024E RightstepCount++;
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0002 024F RightstepCount %= sizeof(rotateR);
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0002 0250 break;
;PCODE: $00000407 VOL: 0
; 0002 0251 }
;PCODE: $00000408 VOL: 0
; 0002 0252 Flag.RmotorRun = TRUE;
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0002 0253 TCNT3H = VelocityRightmotorTCNT3 >> 8;
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0002 0254 TCNT3L = VelocityRightmotorTCNT3 & 0xff;
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0002 0255 }
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;
;
;
;
;
;void InitializeStepMotor(void)
; 0002 025C {
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0002 025D double distance4perStep;
; 0002 025E 
; 0002 025F // LEFT MOTOR - PORTD 4,5,6,7
; 0002 0260 PORTD&=0x0F;
;PCODE: $00000416 VOL: 0
;	distance4perStep -> Y+0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0002 0261 DDRD|=0xF0;
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0002 0262 // RIGHT MOTOR - PORTE 4,5,6,7
; 0002 0263 PORTE&=0x0F;
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0002 0264 DDRE|=0xF0;
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0002 0265 // Timer/Counter 1 initialization
; 0002 0266 // Clock source: System Clock
; 0002 0267 // Clock value: 62.500 kHz
; 0002 0268 // Mode: Normal top=FFFFh
; 0002 0269 // OC1A output: Discon.
; 0002 026A // OC1B output: Discon.
; 0002 026B // OC1C output: Discon.
; 0002 026C // Noise Canceler: Off
; 0002 026D // Input Capture on Falling Edge
; 0002 026E // Timer 1 Overflow Interrupt: On
; 0002 026F // Input Capture Interrupt: Off
; 0002 0270 // Compare A Match Interrupt: Off
; 0002 0271 // Compare B Match Interrupt: Off
; 0002 0272 // Compare C Match Interrupt: Off
; 0002 0273 TCCR1A=0x00;
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0002 0274 TCCR1B=0x04;
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0002 0275 TCNT1H=0x00;
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0002 0276 TCNT1L=0x00;
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0002 0277 ICR1H=0x00;
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0002 0278 ICR1L=0x00;
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0002 0279 OCR1AH=0x00;
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0002 027A OCR1AL=0x00;
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0002 027B OCR1BH=0x00;
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0002 027C OCR1BL=0x00;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0002 027D OCR1CH=0x00;
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0002 027E OCR1CL=0x00;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0002 027F // Timer/Counter 3 initialization
; 0002 0280 // Clock source: System Clock
; 0002 0281 // Clock value: 62.500 kHz
; 0002 0282 // Mode: Normal top=FFFFh
; 0002 0283 // OC3A output: Discon.
; 0002 0284 // OC3B output: Discon.
; 0002 0285 // OC3C output: Discon.
; 0002 0286 // Noise Canceler: Off
; 0002 0287 // Input Capture on Falling Edge
; 0002 0288 // Timer 3 Overflow Interrupt: On
; 0002 0289 // Input Capture Interrupt: Off
; 0002 028A // Compare A Match Interrupt: Off
; 0002 028B // Compare B Match Interrupt: Off
; 0002 028C // Compare C Match Interrupt: Off
; 0002 028D TCCR3A=0x00;
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0002 028E TCCR3B=0x04;
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0002 028F TCNT3H=0x00;
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0002 0290 TCNT3L=0x00;
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0002 0291 ICR3H=0x00;
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0002 0292 ICR3L=0x00;
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0002 0293 OCR3AH=0x00;
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0002 0294 OCR3AL=0x00;
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0002 0295 OCR3BH=0x00;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0002 0296 OCR3BL=0x00;
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0002 0297 OCR3CH=0x00;
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0002 0298 OCR3CL=0x00;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0002 0299 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0002 029A TIMSK=0x04;
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0002 029B ETIMSK=0x04;
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0002 029C 
; 0002 029D 
; 0002 029E distance4perStep = (double)(PI * TIRE_RAD / (double)MOTOR_STEP);
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0002 029F //0.1178(mm)
; 0002 02A0 Information.nStep4perBlock = (int)((double)180. / distance4perStep);
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0002 02A1 //1527.88(step)
; 0002 02A2 Information.nStep4Turn90 = (int)((PI*MOUSE_WIDTH/4.)/distance4perStep);
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0002 02A3 
; 0002 02A4 //Information.nStep4Turn90_RIGHT_WHEEL = (int)((PI*MOUSE_WIDTH/4.)/distance4perStep);
; 0002 02A5 //Information.nStep4Turn90_LEFT_WHEEL = (int)((PI*MOUSE_WIDTH/4.)/distance4perStep);
; 0002 02A6 
; 0002 02A7 //====================
; 0002 02A8 LeftstepCount=0;
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0002 02A9 RightstepCount=0;
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0002 02AA 
; 0002 02AB #asm("sei")
;PCODE: $00000468 VOL: 0
	sei
;PCODE: $00000469 VOL: 0
; 0002 02AC VelocityLeftmotorTCNT1 = 65385; // 왼쪽 모터의 속도 (65200 ~ 65535)  65400
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0002 02AD VelocityRightmotorTCNT3 = 65385; // 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0002 02AE //====================
; 0002 02AF 
; 0002 02B0 }
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
