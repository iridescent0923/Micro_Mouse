
AVRASM ver. 2.1.30  C:\Users\±èµ¿¿í\Documents\StepMotor\List\Sensor.asm Wed Oct 14 16:02:28 2020

C:\Users\±èµ¿¿í\Documents\StepMotor\List\Sensor.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\Sensor.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\Sensor.asm(1063): warning: Register r8 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\Sensor.asm(1064): warning: Register r10 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\Sensor.asm(1065): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _front=R4
                 	.DEF _left=R6
                 	.DEF _right=R8
                 	.DEF _counter=R10
                 	.DEF _LED=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0057 	JMP  __RESET
000002 940c 008a 	JMP  _ext_int0_isr
000004 940c 009c 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x22:
00004f 0000
000050 0000
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000053 0008      	.DW  0x08
000054 0004      	.DW  0x04
000055 009e      	.DW  _0x22*2
                 
                 _0xFFFFFFFF:
000056 0000      	.DW  0
                 
                 __RESET:
000057 94f8      	CLI
000058 27ee      	CLR  R30
000059 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005a e0f1      	LDI  R31,1
00005b bff5      	OUT  MCUCR,R31
00005c bfe5      	OUT  MCUCR,R30
00005d 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00005f e1f8      	LDI  R31,0x18
000060 bdf1      	OUT  WDTCR,R31
000061 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e0a0      	LDI  R26,LOW(__SRAM_START)
00006b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006c 93ed      	ST   X+,R30
00006d 9701      	SBIW R24,1
00006e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006f eae6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000070 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000071 9185      	LPM  R24,Z+
000072 9195      	LPM  R25,Z+
000073 9700      	SBIW R24,0
000074 f061      	BREQ __GLOBAL_INI_END
000075 91a5      	LPM  R26,Z+
000076 91b5      	LPM  R27,Z+
000077 9005      	LPM  R0,Z+
000078 9015      	LPM  R1,Z+
000079 01bf      	MOVW R22,R30
00007a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007b 9005      	LPM  R0,Z+
00007c 920d      	ST   X+,R0
00007d 9701      	SBIW R24,1
00007e f7e1      	BRNE __GLOBAL_INI_LOOP
00007f 01fb      	MOVW R30,R22
000080 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000081 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000082 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000083 bfed      	OUT  SPL,R30
000084 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000085 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000086 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000087 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000088 940c 00f3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include "Sensor.h"
                 ;#include "UART.h"
                 ;#include "LED.h"
                 ;
                 ;#define ADC_VREF_TYPE 0x40
                 ;
                 ;int front=0,left=0,right=0;
                 ;int counter=0;
                 ;int LED;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) //sw1:¹à°Ô = 0x00 delayÁõ
                 ; 0000 0010 {
                 
                 	.CSEG
                 _ext_int0_isr:
00008a 93ea      	ST   -Y,R30
00008b 93fa      	ST   -Y,R31
00008c b7ef      	IN   R30,SREG
00008d 93ea      	ST   -Y,R30
                 ; 0000 0011     if(counter==4)
00008e e0e4      	LDI  R30,LOW(4)
00008f e0f0      	LDI  R31,HIGH(4)
000090 15ea      	CP   R30,R10
000091 05fb      	CPC  R31,R11
000092 f409      	BRNE _0x3
                 ; 0000 0012     {
                 ; 0000 0013         counter=4;
000093 015f      	MOVW R10,R30
                 ; 0000 0014     }
                 ; 0000 0015     counter++;
                 _0x3:
000094 01f5      	MOVW R30,R10
000095 9631      	ADIW R30,1
000096 015f      	MOVW R10,R30
                 ; 0000 0016 
                 ; 0000 0017 
                 ; 0000 0018 }
000097 91e9      	LD   R30,Y+
000098 bfef      	OUT  SREG,R30
000099 91f9      	LD   R31,Y+
00009a 91e9      	LD   R30,Y+
00009b 9518      	RETI
                 ;
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void) //sw2:¾îµÓ°Ô
                 ; 0000 001C {
                 _ext_int1_isr:
00009c 920a      	ST   -Y,R0
00009d 93ea      	ST   -Y,R30
00009e 93fa      	ST   -Y,R31
00009f b7ef      	IN   R30,SREG
0000a0 93ea      	ST   -Y,R30
                 ; 0000 001D     if(counter==0)
0000a1 2c0a      	MOV  R0,R10
0000a2 280b      	OR   R0,R11
0000a3 f411      	BRNE _0x4
                 ; 0000 001E     {
                 ; 0000 001F         counter=0;
0000a4 24aa      	CLR  R10
0000a5 24bb      	CLR  R11
                 ; 0000 0020     }
                 ; 0000 0021     counter--;
                 _0x4:
0000a6 01f5      	MOVW R30,R10
0000a7 9731      	SBIW R30,1
0000a8 015f      	MOVW R10,R30
                 ; 0000 0022 
                 ; 0000 0023 }
0000a9 91e9      	LD   R30,Y+
0000aa bfef      	OUT  SREG,R30
0000ab 91f9      	LD   R31,Y+
0000ac 91e9      	LD   R30,Y+
0000ad 9009      	LD   R0,Y+
0000ae 9518      	RETI
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0026 {
                 _read_adc:
                 ; 0000 0027     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0000af 81e8      	LD   R30,Y
0000b0 64e0      	ORI  R30,0x40
0000b1 b9e7      	OUT  0x7,R30
                 ; 0000 0028     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0029     delay_us(10);
                +
0000b2 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0000b3 958a     +DEC R24
0000b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 002A     // Start the AD conversion
                 ; 0000 002B     ADCSRA|=0x40;
0000b5 9a36      	SBI  0x6,6
                 ; 0000 002C     // Wait for the AD conversion to complete
                 ; 0000 002D     while ((ADCSRA & 0x10)==0);
                 _0x5:
0000b6 9b34      	SBIS 0x6,4
0000b7 cffe      	RJMP _0x5
                 ; 0000 002E     ADCSRA|=0x10;
0000b8 9a34      	SBI  0x6,4
                 ; 0000 002F     return ADCW;
0000b9 b1e4      	IN   R30,0x4
0000ba b1f5      	IN   R31,0x4+1
0000bb 9621      	ADIW R28,1
0000bc 9508      	RET
                 ; 0000 0030 }
                 ;
                 ;unsigned int readSensor(char si)
                 ; 0000 0033 {
                 _readSensor:
                 ; 0000 0034 unsigned int ret;
                 ; 0000 0035 switch(si)
0000bd 931a      	ST   -Y,R17
0000be 930a      	ST   -Y,R16
                 ;	si -> Y+2
                 ;	ret -> R16,R17
0000bf 81ea      	LDD  R30,Y+2
0000c0 e0f0      	LDI  R31,0
                 ; 0000 0036 {
                 ; 0000 0037 case FRONT_SENSOR:
0000c1 9730      	SBIW R30,0
0000c2 f429      	BRNE _0xB
                 ; 0000 0038 PORTB.5=1;
0000c3 9ac5      	SBI  0x18,5
                 ; 0000 0039 delay_us(50);
0000c4 940e 016d 	CALL SUBOPT_0x0
                 ; 0000 003A ret=read_adc(si);
                 ; 0000 003B PORTB.5=0;
0000c6 98c5      	CBI  0x18,5
                 ; 0000 003C break;
0000c7 c011      	RJMP _0xA
                 ; 0000 003D case LEFT_SENSOR:
                 _0xB:
0000c8 30e1      	CPI  R30,LOW(0x1)
0000c9 e0a0      	LDI  R26,HIGH(0x1)
0000ca 07fa      	CPC  R31,R26
0000cb f429      	BRNE _0x10
                 ; 0000 003E PORTB.6=1;
0000cc 9ac6      	SBI  0x18,6
                 ; 0000 003F delay_us(50);
0000cd 940e 016d 	CALL SUBOPT_0x0
                 ; 0000 0040 ret=read_adc(si);
                 ; 0000 0041 PORTB.6=0;
0000cf 98c6      	CBI  0x18,6
                 ; 0000 0042 break;
0000d0 c008      	RJMP _0xA
                 ; 0000 0043 case RIGHT_SENSOR:
                 _0x10:
0000d1 30e2      	CPI  R30,LOW(0x2)
0000d2 e0a0      	LDI  R26,HIGH(0x2)
0000d3 07fa      	CPC  R31,R26
0000d4 f421      	BRNE _0xA
                 ; 0000 0044 PORTB.7=1;
0000d5 9ac7      	SBI  0x18,7
                 ; 0000 0045 delay_us(50);
0000d6 940e 016d 	CALL SUBOPT_0x0
                 ; 0000 0046 ret=read_adc(si);
                 ; 0000 0047 PORTB.7=0;
0000d8 98c7      	CBI  0x18,7
                 ; 0000 0048 break;
                 ; 0000 0049 }
                 _0xA:
                 ; 0000 004A return ret;
0000d9 01f8      	MOVW R30,R16
0000da 8119      	LDD  R17,Y+1
0000db 8108      	LDD  R16,Y+0
0000dc 9623      	ADIW R28,3
0000dd 9508      	RET
                 ; 0000 004B }
                 ;
                 ;void InitializeSensor(void)
                 ; 0000 004E {
                 _InitializeSensor:
                 ; 0000 004F // ¹ß±¤¼¾¼­ PORTB 5,6,7
                 ; 0000 0050 PORTB &= 0x1f;
0000de b3e8      	IN   R30,0x18
0000df 71ef      	ANDI R30,LOW(0x1F)
0000e0 bbe8      	OUT  0x18,R30
                 ; 0000 0051 DDRB |= 0xe0;
0000e1 b3e7      	IN   R30,0x17
0000e2 6ee0      	ORI  R30,LOW(0xE0)
0000e3 bbe7      	OUT  0x17,R30
                 ; 0000 0052 // ¼ö±¤¼¾¼­ PORTF 0,1,2
                 ; 0000 0053 PORTF &= 0xf8;
0000e4 91e0 0062 	LDS  R30,98
0000e6 7fe8      	ANDI R30,LOW(0xF8)
0000e7 93e0 0062 	STS  98,R30
                 ; 0000 0054 DDRF &= 0xf8;
0000e9 91e0 0061 	LDS  R30,97
0000eb 7fe8      	ANDI R30,LOW(0xF8)
0000ec 93e0 0061 	STS  97,R30
                 ; 0000 0055 // ADC initialization
                 ; 0000 0056 // ADC Clock frequency: 125.000 kHz
                 ; 0000 0057 // ADC Voltage Reference: AVCC pin
                 ; 0000 0058 ADMUX=ADC_VREF_TYPE;
0000ee e4e0      	LDI  R30,LOW(64)
0000ef b9e7      	OUT  0x7,R30
                 ; 0000 0059 ADCSRA=0x87;
0000f0 e8e7      	LDI  R30,LOW(135)
0000f1 b9e6      	OUT  0x6,R30
                 ; 0000 005A }
0000f2 9508      	RET
                 ;
                 ;void main()
                 ; 0000 005D {
                 _main:
                 ; 0000 005E     InitializeUART();
0000f3 d04c      	RCALL _InitializeUART
                 ; 0000 005F     InitializeSensor();
0000f4 dfe9      	RCALL _InitializeSensor
                 ; 0000 0060     IO_init();//LED init
0000f5 940e 0150 	CALL _IO_init
                 ; 0000 0061 
                 ; 0000 0062     //INT SETUP
                 ; 0000 0063 EICRA=0x0A;
0000f7 e0ea      	LDI  R30,LOW(10)
0000f8 93e0 006a 	STS  106,R30
                 ; 0000 0064 EICRB=0x00;
0000fa e0e0      	LDI  R30,LOW(0)
0000fb bfea      	OUT  0x3A,R30
                 ; 0000 0065 EIMSK=0x03;
0000fc e0e3      	LDI  R30,LOW(3)
0000fd bfe9      	OUT  0x39,R30
                 ; 0000 0066 EIFR=0x03;
0000fe bfe8      	OUT  0x38,R30
                 ; 0000 0067 
                 ; 0000 0068 #asm("sei")
0000ff 9478      	sei
                 ; 0000 0069 
                 ; 0000 006A 
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D     while(1)
                 _0x1A:
                 ; 0000 006E     {
                 ; 0000 006F     front=readSensor(FRONT_SENSOR);
000100 e0e0      	LDI  R30,LOW(0)
000101 93ea      	ST   -Y,R30
000102 dfba      	RCALL _readSensor
000103 012f      	MOVW R4,R30
                 ; 0000 0070     delay_ms(100);
000104 e6e4      	LDI  R30,LOW(100)
000105 e0f0      	LDI  R31,HIGH(100)
000106 93fa      	ST   -Y,R31
000107 93ea      	ST   -Y,R30
000108 940e 0177 	CALL _delay_ms
                 ; 0000 0071 
                 ; 0000 0072     if(counter==1)
00010a e0e1      	LDI  R30,LOW(1)
00010b e0f0      	LDI  R31,HIGH(1)
00010c 15ea      	CP   R30,R10
00010d 05fb      	CPC  R31,R11
00010e f419      	BRNE _0x1D
                 ; 0000 0073     {
                 ; 0000 0074         LED=LED1;
00010f e1e0      	LDI  R30,LOW(16)
000110 e0f0      	LDI  R31,HIGH(16)
000111 016f      	MOVW R12,R30
                 ; 0000 0075 
                 ; 0000 0076 
                 ; 0000 0077     }
                 ; 0000 0078     if(counter==2)
                 _0x1D:
000112 e0e2      	LDI  R30,LOW(2)
000113 e0f0      	LDI  R31,HIGH(2)
000114 15ea      	CP   R30,R10
000115 05fb      	CPC  R31,R11
000116 f419      	BRNE _0x1E
                 ; 0000 0079     {
                 ; 0000 007A         LED=LED2;
000117 e2e0      	LDI  R30,LOW(32)
000118 e0f0      	LDI  R31,HIGH(32)
000119 016f      	MOVW R12,R30
                 ; 0000 007B 
                 ; 0000 007C     }
                 ; 0000 007D 
                 ; 0000 007E     if(counter==3)
                 _0x1E:
00011a e0e3      	LDI  R30,LOW(3)
00011b e0f0      	LDI  R31,HIGH(3)
00011c 15ea      	CP   R30,R10
00011d 05fb      	CPC  R31,R11
00011e f419      	BRNE _0x1F
                 ; 0000 007F     {
                 ; 0000 0080         LED=LED3;
00011f e4e0      	LDI  R30,LOW(64)
000120 e0f0      	LDI  R31,HIGH(64)
000121 016f      	MOVW R12,R30
                 ; 0000 0081 
                 ; 0000 0082     }
                 ; 0000 0083 
                 ; 0000 0084     if(counter==4)
                 _0x1F:
000122 e0e4      	LDI  R30,LOW(4)
000123 e0f0      	LDI  R31,HIGH(4)
000124 15ea      	CP   R30,R10
000125 05fb      	CPC  R31,R11
000126 f419      	BRNE _0x20
                 ; 0000 0085     {
                 ; 0000 0086         LED=LED4;
000127 e8e0      	LDI  R30,LOW(128)
000128 e0f0      	LDI  R31,HIGH(128)
000129 016f      	MOVW R12,R30
                 ; 0000 0087 
                 ; 0000 0088     }
                 ; 0000 0089 
                 ; 0000 008A     {
                 _0x20:
                 ; 0000 008B 
                 ; 0000 008C     LED_ON(LED);
00012a 92da      	ST   -Y,R13
00012b 92ca      	ST   -Y,R12
00012c 940e 015b 	CALL _LED_ON
                 ; 0000 008D     delay_ms(80-front);
00012e e5e0      	LDI  R30,LOW(80)
00012f e0f0      	LDI  R31,HIGH(80)
000130 19e4      	SUB  R30,R4
000131 09f5      	SBC  R31,R5
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
000134 940e 0177 	CALL _delay_ms
                 ; 0000 008E     LED_OFF(LED);
000136 92da      	ST   -Y,R13
000137 92ca      	ST   -Y,R12
000138 940e 0163 	CALL _LED_OFF
                 ; 0000 008F     delay_ms(front);
00013a 925a      	ST   -Y,R5
00013b 924a      	ST   -Y,R4
00013c 940e 0177 	CALL _delay_ms
                 ; 0000 0090 
                 ; 0000 0091     }
                 ; 0000 0092     }
00013e cfc1      	RJMP _0x1A
                 ; 0000 0093 
                 ; 0000 0094 
                 ; 0000 0095 }
                 _0x21:
00013f cfff      	RJMP _0x21
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "UART.h"
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;void putchar(char c){
                 ; 0001 0005 void putchar(char c){
                 
                 	.CSEG
                 ; 0001 0006     while((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 ;	c -> Y+0
                 ; 0001 0007     UDR1=c;
                 ; 0001 0008 }
                 ;
                 ;// Read a character from the USART1 Receiver
                 ;unsigned char getchar(void){
                 ; 0001 000B unsigned char getchar(void){
                 ; 0001 000C     while((UCSR1A & RX_COMPLETE)==0);
                 ; 0001 000D     return UDR1;
                 ; 0001 000E }
                 ;
                 ;void InitializeUART(void){
                 ; 0001 0010 void InitializeUART(void){
                 _InitializeUART:
                 ; 0001 0011     // USART1 initialization
                 ; 0001 0012     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 0013     // USART1 Receiver: On
                 ; 0001 0014     // USART1 Transmitter: On
                 ; 0001 0015     // USART1 Mode: Asynchronous
                 ; 0001 0016     // USART1 Baud Rate: 9600
                 ; 0001 0017     UCSR1A=0x00;
000140 e0e0      	LDI  R30,LOW(0)
000141 93e0 009b 	STS  155,R30
                 ; 0001 0018     UCSR1B=0x18;
000143 e1e8      	LDI  R30,LOW(24)
000144 93e0 009a 	STS  154,R30
                 ; 0001 0019     UCSR1C=0x06;
000146 e0e6      	LDI  R30,LOW(6)
000147 93e0 009d 	STS  157,R30
                 ; 0001 001A     UBRR1H=0x00;
000149 e0e0      	LDI  R30,LOW(0)
00014a 93e0 0098 	STS  152,R30
                 ; 0001 001B     UBRR1L=0x67;
00014c e6e7      	LDI  R30,LOW(103)
00014d 93e0 0099 	STS  153,R30
                 ; 0001 001C }
00014f 9508      	RET
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "LED.h"
                 ;// LED1:0x10 2:0x20 3:0x40 4:0x80   //°¡ ²¨Áö´Â°Å
                 ;
                 ;
                 ;void IO_init(void)//LED init
                 ; 0002 0008 {
                 
                 	.CSEG
                 _IO_init:
                 ; 0002 0009 // LED - PORTF 4,5,6,7
                 ; 0002 000A     PORTF &= 0x0F;
000150 91e0 0062 	LDS  R30,98
000152 70ef      	ANDI R30,LOW(0xF)
000153 93e0 0062 	STS  98,R30
                 ; 0002 000B     DDRF |= 0xF0;
000155 91e0 0061 	LDS  R30,97
000157 6fe0      	ORI  R30,LOW(0xF0)
000158 93e0 0061 	STS  97,R30
                 ; 0002 000C }
00015a 9508      	RET
                 ;
                 ;// LED1 -> LED2 (=LED1*2)
                 ;void LED_ON(int nLED)//LED_ON(LED2);
                 ; 0002 0010 {
                 _LED_ON:
                 ; 0002 0011     PORTF &= ~(nLED);
                 ;	nLED -> Y+0
00015b e6a2      	LDI  R26,LOW(98)
00015c e0b0      	LDI  R27,HIGH(98)
00015d 2e0a      	MOV  R0,R26
00015e 91ac      	LD   R26,X
00015f 81e8      	LD   R30,Y
000160 95e0      	COM  R30
000161 23ea      	AND  R30,R26
000162 c006      	RJMP _0x2060001
                 ; 0002 0012 }
                 ;
                 ;void LED_OFF(int nLED)//LED OFF
                 ; 0002 0015 {
                 _LED_OFF:
                 ; 0002 0016     PORTF |= nLED;
                 ;	nLED -> Y+0
000163 e6a2      	LDI  R26,LOW(98)
000164 e0b0      	LDI  R27,HIGH(98)
000165 2e0a      	MOV  R0,R26
000166 91ec      	LD   R30,X
000167 81a8      	LD   R26,Y
000168 2bea      	OR   R30,R26
                 _0x2060001:
000169 2da0      	MOV  R26,R0
00016a 93ec      	ST   X,R30
                 ; 0002 0017 }
00016b 9622      	ADIW R28,2
00016c 9508      	RET
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
                +
00016d ec88     +LDI R24 , LOW ( 200 )
00016e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00016f 9701     +SBIW R24 , 1
000170 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000171 81ea      	LDD  R30,Y+2
000172 93ea      	ST   -Y,R30
000173 940e 00af 	CALL _read_adc
000175 018f      	MOVW R16,R30
000176 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000177 91e9      	ld   r30,y+
000178 91f9      	ld   r31,y+
000179 9630      	adiw r30,0
00017a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00017b ea80     +LDI R24 , LOW ( 0xFA0 )
00017c e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00017d 9701     +SBIW R24 , 1
00017e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00017f 95a8      	wdr
000180 9731      	sbiw r30,1
000181 f7c9      	brne __delay_ms0
                 __delay_ms1:
000182 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   3 r5 :   2 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:  12 r11:   7 r12:   6 r13:   2 r14:   0 r15:   0 
r16:   4 r17:   2 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  14 r25:   4 r26:  16 r27:   5 r28:   4 r29:   1 r30: 120 r31:  33 
x  :   6 y  :  37 z  :   7 
Registers used: 22 out of 35 (62.9%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   5 and   :   1 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  10 
cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   5 cpc   :   7 cpi   :   2 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   6 inc   :   0 jmp   :  36 ld    :  14 ldd   :   4 
ldi   :  59 lds   :   4 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   4 
movw  :  15 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   2 ori   :   3 out   :  18 pop   :   0 push  :   0 rcall :   3 
ret   :   8 reti  :   2 rjmp  :   7 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   1 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  25 std   :   0 sts   :  11 sub   :   1 subi  :   0 
swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 39 out of 117 (33.3%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000306    740     34    774  131072   0.6%
[.dseg] 0x000100 0x000500      0      0      0    4351   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
