
AVRASM ver. 2.1.30  C:\Users\±èµ¿¿í\Documents\StepMotor\List\main.asm Sat Oct 17 17:33:38 2020

C:\Users\±èµ¿¿í\Documents\StepMotor\List\main.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\main.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\main.asm(1063): warning: Register r8 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\main.asm(1064): warning: Register r10 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\main.asm(1065): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _LeftstepCount=R4
                 	.DEF _RightstepCount=R6
                 	.DEF _VelocityLeftmotorTCNT1=R8
                 	.DEF _VelocityRightmotorTCNT3=R10
                 	.DEF _direction_control=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0091 	JMP  _ext_int0_isr
000004 940c 0095 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 00f9 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0140 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0xA0003:
00004f 0109
000050 0405
000051 0206
000052 080a      	.DB  0x9,0x1,0x5,0x4,0x6,0x2,0xA,0x8
                 _0xA0004:
000053 0809
000054 020a
000055 0406
000056 0105      	.DB  0x9,0x8,0xA,0x2,0x6,0x4,0x5,0x1
                 
                 __GLOBAL_INI_TBL:
000057 0008      	.DW  0x08
000058 0500      	.DW  _rotateR
000059 009e      	.DW  _0xA0003*2
                 
00005a 0008      	.DW  0x08
00005b 0508      	.DW  _rotateL
00005c 00a6      	.DW  _0xA0004*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bff5      	OUT  MCUCR,R31
000063 bfe5      	OUT  MCUCR,R30
000064 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000066 e1f8      	LDI  R31,0x18
000067 bdf1      	OUT  WDTCR,R31
000068 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000069 e08d      	LDI  R24,(14-2)+1
00006a e0a2      	LDI  R26,2
00006b 27bb      	CLR  R27
                 __CLEAR_REG:
00006c 93ed      	ST   X+,R30
00006d 958a      	DEC  R24
00006e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000070 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000071 e0a0      	LDI  R26,LOW(__SRAM_START)
000072 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000073 93ed      	ST   X+,R30
000074 9701      	SBIW R24,1
000075 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000076 eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000077 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000078 9185      	LPM  R24,Z+
000079 9195      	LPM  R25,Z+
00007a 9700      	SBIW R24,0
00007b f061      	BREQ __GLOBAL_INI_END
00007c 91a5      	LPM  R26,Z+
00007d 91b5      	LPM  R27,Z+
00007e 9005      	LPM  R0,Z+
00007f 9015      	LPM  R1,Z+
000080 01bf      	MOVW R22,R30
000081 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000082 9005      	LPM  R0,Z+
000083 920d      	ST   X+,R0
000084 9701      	SBIW R24,1
000085 f7e1      	BRNE __GLOBAL_INI_LOOP
000086 01fb      	MOVW R30,R22
000087 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000088 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000089 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008a bfed      	OUT  SPL,R30
00008b e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008e e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008f 940c 00ae 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#include "LED.h"
                 ;#include "INT.h"
                 ;#include "Sensor.h"
                 ;#include "UART.h"
                 ;#include "StepMotor.h"
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) //sw1
                 ; 0000 000F {
                 
                 	.CSEG
                 _ext_int0_isr:
000091 940e 01ed 	CALL SUBOPT_0x0
                 ; 0000 0010     PORTF=0x00;
000093 e0e0      	LDI  R30,LOW(0)
000094 c003      	RJMP _0x7
                 ; 0000 0011     delay_ms(1000);
                 ; 0000 0012 
                 ; 0000 0013 }
                 ;
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void) //sw2
                 ; 0000 0017 {
                 _ext_int1_isr:
000095 940e 01ed 	CALL SUBOPT_0x0
                 ; 0000 0018     PORTF=0xff;
000097 efef      	LDI  R30,LOW(255)
                 _0x7:
000098 93e0 0062 	STS  98,R30
                 ; 0000 0019     delay_ms(1000);
00009a eee8      	LDI  R30,LOW(1000)
00009b e0f3      	LDI  R31,HIGH(1000)
00009c 93fa      	ST   -Y,R31
00009d 93ea      	ST   -Y,R30
00009e 940e 0219 	CALL _delay_ms
                 ; 0000 001A 
                 ; 0000 001B }
0000a0 91e9      	LD   R30,Y+
0000a1 bfef      	OUT  SREG,R30
0000a2 91f9      	LD   R31,Y+
0000a3 91e9      	LD   R30,Y+
0000a4 91b9      	LD   R27,Y+
0000a5 91a9      	LD   R26,Y+
0000a6 9199      	LD   R25,Y+
0000a7 9189      	LD   R24,Y+
0000a8 9179      	LD   R23,Y+
0000a9 9169      	LD   R22,Y+
0000aa 90f9      	LD   R15,Y+
0000ab 9019      	LD   R1,Y+
0000ac 9009      	LD   R0,Y+
0000ad 9518      	RETI
                 ;
                 ;
                 ;void main(void)
                 ; 0000 001F {
                 _main:
                 ; 0000 0020     IO_init();
0000ae d00b      	RCALL _IO_init
                 ; 0000 0021     INT_init();
0000af 940e 00ea 	CALL _INT_init
                 ; 0000 0022     InitializeSensor();
0000b1 940e 00d5 	CALL _InitializeSensor
                 ; 0000 0023     InitializeUART();
0000b3 940e 00c5 	CALL _InitializeUART
                 ; 0000 0024 
                 ; 0000 0025     InitializeStepMotor();
0000b5 940e 018f 	CALL _InitializeStepMotor
                 ; 0000 0026 
                 ; 0000 0027 // Global enable interrupts
                 ; 0000 0028 #asm("sei")
0000b7 9478      	sei
                 ; 0000 0029 
                 ; 0000 002A 
                 ; 0000 002B while (1)
                 _0x3:
                 ; 0000 002C {
                 ; 0000 002D // Place your code here
                 ; 0000 002E };
0000b8 cfff      	RJMP _0x3
                 ; 0000 002F 
                 ; 0000 0030 
                 ; 0000 0031 }
                 _0x6:
0000b9 cfff      	RJMP _0x6
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "LED.h"
                 ;// LED1:0x10 2:0x20 3:0x40 4:0x80   //°¡ ²¨Áö´Â°Å
                 ;
                 ;
                 ;void IO_init(void)//LED init
                 ; 0001 0008 {
                 
                 	.CSEG
                 _IO_init:
                 ; 0001 0009 // LED - PORTF 4,5,6,7
                 ; 0001 000A     PORTF &= 0x0F;
0000ba 91e0 0062 	LDS  R30,98
0000bc 70ef      	ANDI R30,LOW(0xF)
0000bd 93e0 0062 	STS  98,R30
                 ; 0001 000B     DDRF |= 0xF0;
0000bf 91e0 0061 	LDS  R30,97
0000c1 6fe0      	ORI  R30,LOW(0xF0)
0000c2 93e0 0061 	STS  97,R30
                 ; 0001 000C }
0000c4 9508      	RET
                 ;
                 ;// LED1 -> LED2 (=LED1*2)
                 ;void LED_ON(int nLED)//LED_ON(LED2);
                 ; 0001 0010 {
                 ; 0001 0011     PORTF &= ~(nLED);
                 ;	nLED -> Y+0
                 ; 0001 0012 }
                 ;
                 ;void LED_OFF(int nLED)//LED OFF
                 ; 0001 0015 {
                 ; 0001 0016     PORTF |= nLED;
                 ;	nLED -> Y+0
                 ; 0001 0017 }
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "UART.h"
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;void putchar(char c){
                 ; 0002 0005 void putchar(char c){
                 
                 	.CSEG
                 ; 0002 0006     while((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 ;	c -> Y+0
                 ; 0002 0007     UDR1=c;
                 ; 0002 0008 }
                 ;
                 ;// Read a character from the USART1 Receiver
                 ;
                 ;
                 ;
                 ;unsigned char getchar(void){
                 ; 0002 000E unsigned char getchar(void){
                 ; 0002 000F     while((UCSR1A & RX_COMPLETE)==0);
                 ; 0002 0010     return UDR1;
                 ; 0002 0011 }
                 ;
                 ;
                 ;
                 ;void InitializeUART(void){
                 ; 0002 0015 void InitializeUART(void){
                 _InitializeUART:
                 ; 0002 0016     // USART1 initialization
                 ; 0002 0017     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0002 0018     // USART1 Receiver: On
                 ; 0002 0019     // USART1 Transmitter: On
                 ; 0002 001A     // USART1 Mode: Asynchronous
                 ; 0002 001B     // USART1 Baud Rate: 9600
                 ; 0002 001C     UCSR1A=0x00;
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 93e0 009b 	STS  155,R30
                 ; 0002 001D     UCSR1B=0x18;
0000c8 e1e8      	LDI  R30,LOW(24)
0000c9 93e0 009a 	STS  154,R30
                 ; 0002 001E     UCSR1C=0x06;
0000cb e0e6      	LDI  R30,LOW(6)
0000cc 93e0 009d 	STS  157,R30
                 ; 0002 001F     UBRR1H=0x00;
0000ce e0e0      	LDI  R30,LOW(0)
0000cf 93e0 0098 	STS  152,R30
                 ; 0002 0020     UBRR1L=0x67;
0000d1 e6e7      	LDI  R30,LOW(103)
0000d2 93e0 0099 	STS  153,R30
                 ; 0002 0021 }
0000d4 9508      	RET
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include "Sensor.h"
                 ;#include "UART.h"
                 ;#include "LED.h"
                 ;
                 ;#define ADC_VREF_TYPE 0x40
                 ;
                 ;void InitializeSensor(void)
                 ; 0003 000C {
                 
                 	.CSEG
                 _InitializeSensor:
                 ; 0003 000D // ¹ß±¤¼¾¼­ PORTB 5,6,7
                 ; 0003 000E PORTB &= 0x1f;
0000d5 b3e8      	IN   R30,0x18
0000d6 71ef      	ANDI R30,LOW(0x1F)
0000d7 bbe8      	OUT  0x18,R30
                 ; 0003 000F DDRB |= 0xe0;
0000d8 b3e7      	IN   R30,0x17
0000d9 6ee0      	ORI  R30,LOW(0xE0)
0000da bbe7      	OUT  0x17,R30
                 ; 0003 0010 // ¼ö±¤¼¾¼­ PORTF 0,1,2
                 ; 0003 0011 PORTF &= 0xf8;
0000db 91e0 0062 	LDS  R30,98
0000dd 7fe8      	ANDI R30,LOW(0xF8)
0000de 93e0 0062 	STS  98,R30
                 ; 0003 0012 DDRF &= 0xf8;
0000e0 91e0 0061 	LDS  R30,97
0000e2 7fe8      	ANDI R30,LOW(0xF8)
0000e3 93e0 0061 	STS  97,R30
                 ; 0003 0013 // ADC initialization
                 ; 0003 0014 // ADC Clock frequency: 125.000 kHz
                 ; 0003 0015 // ADC Voltage Reference: AVCC pin
                 ; 0003 0016 ADMUX=ADC_VREF_TYPE;
0000e5 e4e0      	LDI  R30,LOW(64)
0000e6 b9e7      	OUT  0x7,R30
                 ; 0003 0017 ADCSRA=0x87;
0000e7 e8e7      	LDI  R30,LOW(135)
0000e8 b9e6      	OUT  0x6,R30
                 ; 0003 0018 }
0000e9 9508      	RET
                 ;
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0003 001C {
                 ; 0003 001D     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
                 ; 0003 001E     // Delay needed for the stabilization of the ADC input voltage
                 ; 0003 001F     delay_us(10);
                 ; 0003 0020     // Start the AD conversion
                 ; 0003 0021     ADCSRA|=0x40;
                 ; 0003 0022     // Wait for the AD conversion to complete
                 ; 0003 0023     while ((ADCSRA & 0x10)==0);
                 ; 0003 0024     ADCSRA|=0x10;
                 ; 0003 0025     return ADCW;
                 ; 0003 0026 }
                 ;
                 ;unsigned int readSensor(char si)
                 ; 0003 0029 {
                 ; 0003 002A unsigned int ret;
                 ; 0003 002B switch(si)
                 ;	si -> Y+2
                 ;	ret -> R16,R17
                 ; 0003 002C {
                 ; 0003 002D case FRONT_SENSOR:
                 ; 0003 002E PORTB.5=1;
                 ; 0003 002F delay_us(50);
                 ; 0003 0030 ret=read_adc(si);
                 ; 0003 0031 PORTB.5=0;
                 ; 0003 0032 break;
                 ; 0003 0033 case LEFT_SENSOR:
                 ; 0003 0034 PORTB.6=1;
                 ; 0003 0035 delay_us(50);
                 ; 0003 0036 ret=read_adc(si);
                 ; 0003 0037 PORTB.6=0;
                 ; 0003 0038 break;
                 ; 0003 0039 case RIGHT_SENSOR:
                 ; 0003 003A PORTB.7=1;
                 ; 0003 003B delay_us(50);
                 ; 0003 003C ret=read_adc(si);
                 ; 0003 003D PORTB.7=0;
                 ; 0003 003E break;
                 ; 0003 003F }
                 ; 0003 0040 return ret;
                 ; 0003 0041 }
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;#include "INT.h"
                 ;
                 ;void INT_init()
                 ; 0004 0006 {
                 
                 	.CSEG
                 _INT_init:
                 ; 0004 0007     PORTD &= 0xfc;
0000ea b3e2      	IN   R30,0x12
0000eb 7fec      	ANDI R30,LOW(0xFC)
0000ec bbe2      	OUT  0x12,R30
                 ; 0004 0008     DDRD &= 0xfc;
0000ed b3e1      	IN   R30,0x11
0000ee 7fec      	ANDI R30,LOW(0xFC)
0000ef bbe1      	OUT  0x11,R30
                 ; 0004 0009     EICRA=0x0A;
0000f0 e0ea      	LDI  R30,LOW(10)
0000f1 93e0 006a 	STS  106,R30
                 ; 0004 000A     EICRB=0x00;
0000f3 e0e0      	LDI  R30,LOW(0)
0000f4 bfea      	OUT  0x3A,R30
                 ; 0004 000B     EIMSK=0x03;
0000f5 e0e3      	LDI  R30,LOW(3)
0000f6 bfe9      	OUT  0x39,R30
                 ; 0004 000C     EIFR=0x03;
0000f7 bfe8      	OUT  0x38,R30
                 ; 0004 000D     //#asm("sei")
                 ; 0004 000E }
0000f8 9508      	RET
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "StepMotor.h"
                 ;#define PI       3.14159265358979323846
                 ;
                 ;// Declare your global variables here
                 ;char rotateR[8] = {0b1001,0b0001,0b0101,0b0100,0b0110,0b0010,0b1010,0b1000};
                 
                 	.DSEG
                 ;//R¸ðÅÍ°¡ ÀüÁøÇÏ±â À§ÇÑ 8step
                 ;char rotateL[8] = {0b1001,0b1000,0b1010,0b0010,0b0110,0b0100,0b0101,0b0001};
                 ;//L¸ðÅÍ°¡ ÀüÁøÇÏ±â À§ÇÑ 8step
                 ;int LeftstepCount, RightstepCount; // rotateR°ú rotateLÀÇ °¢°¢ ½ºÅÜÀÌ ¸ðÅÍ¿¡ ¼ø¼­´ë·Î ÀÔ·ÂµÇµµ·Ï Count
                 ;unsigned int VelocityLeftmotorTCNT1, VelocityRightmotorTCNT3; // ¿ÞÂÊ°ú ¿À¸¥ÂÊ ¸ðÅÍÀÇ TCNT ¼Óµµ
                 ;unsigned char direction_control; // ÀÎÅÍ·´Æ® ·çÆ¾¿¡ ¹æÇâÁ¤º¸¸¦ Àü´ÞÇÏ±â À§ÇÑ Àü¿ªº¯¼ö
                 ;
                 ;
                 ;struct {
                 ;int nStep4perBlock; // ÇÑ ºí·Ï ÀÌµ¿½Ã ÇÊ¿äÇÑ ¸ðÅÍÈ¸Àü ½ºÅÜ Á¤º¸
                 ;int nStep4Turn90; // 90µµ ÅÏ ÀÌµ¿½Ã ÇÊ¿äÇÑ ¸ðÅÍÈ¸Àü ½ºÅÜ Á¤º¸
                 ;} Information;
                 ;struct {
                 ;char LmotorRun; // ¿ÞÂÊ ¸ðÅÍ°¡ È¸ÀüÇß´ÂÁö¿¡ ´ëÇÑ Flag
                 ;char RmotorRun; // ¿À¸¥ÂÊ ¸ðÅÍ°¡ È¸ÀüÇß´ÂÁö¿¡ ´ëÇÑ Flag
                 ;} Flag;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;// Timer 1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0005 001E {
                 
                 	.CSEG
                 _timer1_ovf_isr:
0000f9 940e 01fb 	CALL SUBOPT_0x1
                 ; 0005 001F // Place your code here
                 ; 0005 0020 switch(direction_control)
                 ; 0005 0021 {
                 ; 0005 0022 case LEFT:
0000fb 30e5      	CPI  R30,LOW(0x5)
0000fc e0a0      	LDI  R26,HIGH(0x5)
0000fd 07fa      	CPC  R31,R26
0000fe f4a1      	BRNE _0xA0008
                 ; 0005 0023 PORTD |= (rotateL[LeftstepCount]<<4);
0000ff 940e 0207 	CALL SUBOPT_0x2
000101 29e0      	OR   R30,R0
000102 bbe2      	OUT  0x12,R30
                 ; 0005 0024 PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
000103 940e 0207 	CALL SUBOPT_0x2
000105 5fe1      	SUBI R30,-LOW(15)
000106 21e0      	AND  R30,R0
000107 bbe2      	OUT  0x12,R30
                 ; 0005 0025 LeftstepCount--;
000108 01f2      	MOVW R30,R4
000109 9731      	SBIW R30,1
00010a 012f      	MOVW R4,R30
                 ; 0005 0026 if(LeftstepCount < 0)
00010b 2400      	CLR  R0
00010c 1440      	CP   R4,R0
00010d 0450      	CPC  R5,R0
00010e f41c      	BRGE _0xA0009
                 ; 0005 0027 LeftstepCount = sizeof(rotateL)-1;
00010f e0e7      	LDI  R30,LOW(7)
000110 e0f0      	LDI  R31,HIGH(7)
000111 012f      	MOVW R4,R30
                 ; 0005 0028 break;
                 _0xA0009:
000112 c024      	RJMP _0xA0007
                 ; 0005 0029 case RIGHT:
                 _0xA0008:
000113 30e6      	CPI  R30,LOW(0x6)
000114 e0a0      	LDI  R26,HIGH(0x6)
000115 07fa      	CPC  R31,R26
000116 f021      	BREQ _0xA000B
                 ; 0005 002A case BACK:
000117 30e7      	CPI  R30,LOW(0x7)
000118 e0a0      	LDI  R26,HIGH(0x7)
000119 07fa      	CPC  R31,R26
00011a f409      	BRNE _0xA000C
                 _0xA000B:
                 ; 0005 002B case FORWARD:
00011b c004      	RJMP _0xA000D
                 _0xA000C:
00011c 30e4      	CPI  R30,LOW(0x4)
00011d e0a0      	LDI  R26,HIGH(0x4)
00011e 07fa      	CPC  R31,R26
00011f f409      	BRNE _0xA000E
                 _0xA000D:
                 ; 0005 002C case HALF:
000120 c004      	RJMP _0xA000F
                 _0xA000E:
000121 30e8      	CPI  R30,LOW(0x8)
000122 e0a0      	LDI  R26,HIGH(0x8)
000123 07fa      	CPC  R31,R26
000124 f491      	BRNE _0xA0007
                 _0xA000F:
                 ; 0005 002D PORTD |= (rotateL[LeftstepCount]<<4);
000125 940e 0207 	CALL SUBOPT_0x2
000127 29e0      	OR   R30,R0
000128 bbe2      	OUT  0x12,R30
                 ; 0005 002E PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
000129 940e 0207 	CALL SUBOPT_0x2
00012b 5fe1      	SUBI R30,-LOW(15)
00012c 21e0      	AND  R30,R0
00012d bbe2      	OUT  0x12,R30
                 ; 0005 002F LeftstepCount++;
00012e 01f2      	MOVW R30,R4
00012f 9631      	ADIW R30,1
000130 012f      	MOVW R4,R30
                 ; 0005 0030 LeftstepCount %= sizeof(rotateL);
000131 01d2      	MOVW R26,R4
000132 e0e8      	LDI  R30,LOW(8)
000133 e0f0      	LDI  R31,HIGH(8)
000134 940e 02ff 	CALL __MODW21
000136 012f      	MOVW R4,R30
                 ; 0005 0031 break;
                 ; 0005 0032 }
                 _0xA0007:
                 ; 0005 0033 Flag.LmotorRun = TRUE;
000137 e0e1      	LDI  R30,LOW(1)
000138 93e0 0514 	STS  _Flag,R30
                 ; 0005 0034 TCNT1H = VelocityLeftmotorTCNT1 >> 8;
00013a 2de9      	MOV  R30,R9
00013b 70f0      	ANDI R31,HIGH(0x0)
00013c bded      	OUT  0x2D,R30
                 ; 0005 0035 TCNT1L = VelocityLeftmotorTCNT1 & 0xff;
00013d 2de8      	MOV  R30,R8
00013e bdec      	OUT  0x2C,R30
                 ; 0005 0036 }
00013f c045      	RJMP _0xA0042
                 ;// Timer 3 overflow interrupt service routine
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
                 ; 0005 0039 {
                 _timer3_ovf_isr:
000140 940e 01fb 	CALL SUBOPT_0x1
                 ; 0005 003A // Place your code here
                 ; 0005 003B switch(direction_control)
                 ; 0005 003C {
                 ; 0005 003D case RIGHT:
000142 30e6      	CPI  R30,LOW(0x6)
000143 e0a0      	LDI  R26,HIGH(0x6)
000144 07fa      	CPC  R31,R26
000145 f021      	BREQ _0xA0015
                 ; 0005 003E case BACK:
000146 30e7      	CPI  R30,LOW(0x7)
000147 e0a0      	LDI  R26,HIGH(0x7)
000148 07fa      	CPC  R31,R26
000149 f4a1      	BRNE _0xA0016
                 _0xA0015:
                 ; 0005 003F PORTE |= (rotateR[RightstepCount]<<4);
00014a 940e 0210 	CALL SUBOPT_0x3
00014c 29e0      	OR   R30,R0
00014d b9e3      	OUT  0x3,R30
                 ; 0005 0040 PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
00014e 940e 0210 	CALL SUBOPT_0x3
000150 5fe1      	SUBI R30,-LOW(15)
000151 21e0      	AND  R30,R0
000152 b9e3      	OUT  0x3,R30
                 ; 0005 0041 RightstepCount--;
000153 01f3      	MOVW R30,R6
000154 9731      	SBIW R30,1
000155 013f      	MOVW R6,R30
                 ; 0005 0042 if(RightstepCount < 0)
000156 2400      	CLR  R0
000157 1460      	CP   R6,R0
000158 0470      	CPC  R7,R0
000159 f41c      	BRGE _0xA0017
                 ; 0005 0043 RightstepCount = sizeof(rotateR)-1;
00015a e0e7      	LDI  R30,LOW(7)
00015b e0f0      	LDI  R31,HIGH(7)
00015c 013f      	MOVW R6,R30
                 ; 0005 0044 break;
                 _0xA0017:
00015d c01f      	RJMP _0xA0013
                 ; 0005 0045 case FORWARD:
                 _0xA0016:
00015e 30e4      	CPI  R30,LOW(0x4)
00015f e0a0      	LDI  R26,HIGH(0x4)
000160 07fa      	CPC  R31,R26
000161 f021      	BREQ _0xA0019
                 ; 0005 0046 case HALF:
000162 30e8      	CPI  R30,LOW(0x8)
000163 e0a0      	LDI  R26,HIGH(0x8)
000164 07fa      	CPC  R31,R26
000165 f409      	BRNE _0xA001A
                 _0xA0019:
                 ; 0005 0047 case LEFT:
000166 c004      	RJMP _0xA001B
                 _0xA001A:
000167 30e5      	CPI  R30,LOW(0x5)
000168 e0a0      	LDI  R26,HIGH(0x5)
000169 07fa      	CPC  R31,R26
00016a f491      	BRNE _0xA0013
                 _0xA001B:
                 ; 0005 0048 PORTE |= (rotateR[RightstepCount]<<4);
00016b 940e 0210 	CALL SUBOPT_0x3
00016d 29e0      	OR   R30,R0
00016e b9e3      	OUT  0x3,R30
                 ; 0005 0049 PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
00016f 940e 0210 	CALL SUBOPT_0x3
000171 5fe1      	SUBI R30,-LOW(15)
000172 21e0      	AND  R30,R0
000173 b9e3      	OUT  0x3,R30
                 ; 0005 004A RightstepCount++;
000174 01f3      	MOVW R30,R6
000175 9631      	ADIW R30,1
000176 013f      	MOVW R6,R30
                 ; 0005 004B RightstepCount %= sizeof(rotateR);
000177 01d3      	MOVW R26,R6
000178 e0e8      	LDI  R30,LOW(8)
000179 e0f0      	LDI  R31,HIGH(8)
00017a 940e 02ff 	CALL __MODW21
00017c 013f      	MOVW R6,R30
                 ; 0005 004C break;
                 ; 0005 004D }
                 _0xA0013:
                 ; 0005 004E Flag.RmotorRun = TRUE;
00017d e0e1      	LDI  R30,LOW(1)
                +
00017e 93e0 0515+STS _Flag + ( 1 ) , R30
                 	__PUTB1MN _Flag,1
                 ; 0005 004F TCNT3H = VelocityRightmotorTCNT3 >> 8;
000180 92b0 0089 	STS  137,R11
                 ; 0005 0050 TCNT3L = VelocityRightmotorTCNT3 & 0xff;
000182 2dea      	MOV  R30,R10
000183 93e0 0088 	STS  136,R30
                 ; 0005 0051 }
                 _0xA0042:
000185 91e9      	LD   R30,Y+
000186 bfef      	OUT  SREG,R30
000187 91f9      	LD   R31,Y+
000188 91e9      	LD   R30,Y+
000189 91b9      	LD   R27,Y+
00018a 91a9      	LD   R26,Y+
00018b 9199      	LD   R25,Y+
00018c 9019      	LD   R1,Y+
00018d 9009      	LD   R0,Y+
00018e 9518      	RETI
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void InitializeStepMotor(void)
                 ; 0005 0058 {
                 _InitializeStepMotor:
                 ; 0005 0059 double distance4perStep;
                 ; 0005 005A 
                 ; 0005 005B // LEFT MOTOR - PORTD 4,5,6,7
                 ; 0005 005C PORTD&=0x0F;
00018f 9724      	SBIW R28,4
                 ;	distance4perStep -> Y+0
000190 b3e2      	IN   R30,0x12
000191 70ef      	ANDI R30,LOW(0xF)
000192 bbe2      	OUT  0x12,R30
                 ; 0005 005D DDRD|=0xF0;
000193 b3e1      	IN   R30,0x11
000194 6fe0      	ORI  R30,LOW(0xF0)
000195 bbe1      	OUT  0x11,R30
                 ; 0005 005E // RIGHT MOTOR - PORTE 4,5,6,7
                 ; 0005 005F PORTE&=0x0F;
000196 b1e3      	IN   R30,0x3
000197 70ef      	ANDI R30,LOW(0xF)
000198 b9e3      	OUT  0x3,R30
                 ; 0005 0060 DDRE|=0xF0;
000199 b1e2      	IN   R30,0x2
00019a 6fe0      	ORI  R30,LOW(0xF0)
00019b b9e2      	OUT  0x2,R30
                 ; 0005 0061 // Timer/Counter 1 initialization
                 ; 0005 0062 // Clock source: System Clock
                 ; 0005 0063 // Clock value: 62.500 kHz
                 ; 0005 0064 // Mode: Normal top=FFFFh
                 ; 0005 0065 // OC1A output: Discon.
                 ; 0005 0066 // OC1B output: Discon.
                 ; 0005 0067 // OC1C output: Discon.
                 ; 0005 0068 // Noise Canceler: Off
                 ; 0005 0069 // Input Capture on Falling Edge
                 ; 0005 006A // Timer 1 Overflow Interrupt: On
                 ; 0005 006B // Input Capture Interrupt: Off
                 ; 0005 006C // Compare A Match Interrupt: Off
                 ; 0005 006D // Compare B Match Interrupt: Off
                 ; 0005 006E // Compare C Match Interrupt: Off
                 ; 0005 006F TCCR1A=0x00;
00019c e0e0      	LDI  R30,LOW(0)
00019d bdef      	OUT  0x2F,R30
                 ; 0005 0070 TCCR1B=0x04;
00019e e0e4      	LDI  R30,LOW(4)
00019f bdee      	OUT  0x2E,R30
                 ; 0005 0071 TCNT1H=0x00;
0001a0 e0e0      	LDI  R30,LOW(0)
0001a1 bded      	OUT  0x2D,R30
                 ; 0005 0072 TCNT1L=0x00;
0001a2 bdec      	OUT  0x2C,R30
                 ; 0005 0073 ICR1H=0x00;
0001a3 bde7      	OUT  0x27,R30
                 ; 0005 0074 ICR1L=0x00;
0001a4 bde6      	OUT  0x26,R30
                 ; 0005 0075 OCR1AH=0x00;
0001a5 bdeb      	OUT  0x2B,R30
                 ; 0005 0076 OCR1AL=0x00;
0001a6 bdea      	OUT  0x2A,R30
                 ; 0005 0077 OCR1BH=0x00;
0001a7 bde9      	OUT  0x29,R30
                 ; 0005 0078 OCR1BL=0x00;
0001a8 bde8      	OUT  0x28,R30
                 ; 0005 0079 OCR1CH=0x00;
0001a9 93e0 0079 	STS  121,R30
                 ; 0005 007A OCR1CL=0x00;
0001ab 93e0 0078 	STS  120,R30
                 ; 0005 007B // Timer/Counter 3 initialization
                 ; 0005 007C // Clock source: System Clock
                 ; 0005 007D // Clock value: 62.500 kHz
                 ; 0005 007E // Mode: Normal top=FFFFh
                 ; 0005 007F // OC3A output: Discon.
                 ; 0005 0080 // OC3B output: Discon.
                 ; 0005 0081 // OC3C output: Discon.
                 ; 0005 0082 // Noise Canceler: Off
                 ; 0005 0083 // Input Capture on Falling Edge
                 ; 0005 0084 // Timer 3 Overflow Interrupt: On
                 ; 0005 0085 // Input Capture Interrupt: Off
                 ; 0005 0086 // Compare A Match Interrupt: Off
                 ; 0005 0087 // Compare B Match Interrupt: Off
                 ; 0005 0088 // Compare C Match Interrupt: Off
                 ; 0005 0089 TCCR3A=0x00;
0001ad 93e0 008b 	STS  139,R30
                 ; 0005 008A TCCR3B=0x04;
0001af e0e4      	LDI  R30,LOW(4)
0001b0 93e0 008a 	STS  138,R30
                 ; 0005 008B TCNT3H=0x00;
0001b2 e0e0      	LDI  R30,LOW(0)
0001b3 93e0 0089 	STS  137,R30
                 ; 0005 008C TCNT3L=0x00;
0001b5 93e0 0088 	STS  136,R30
                 ; 0005 008D ICR3H=0x00;
0001b7 93e0 0081 	STS  129,R30
                 ; 0005 008E ICR3L=0x00;
0001b9 93e0 0080 	STS  128,R30
                 ; 0005 008F OCR3AH=0x00;
0001bb 93e0 0087 	STS  135,R30
                 ; 0005 0090 OCR3AL=0x00;
0001bd 93e0 0086 	STS  134,R30
                 ; 0005 0091 OCR3BH=0x00;
0001bf 93e0 0085 	STS  133,R30
                 ; 0005 0092 OCR3BL=0x00;
0001c1 93e0 0084 	STS  132,R30
                 ; 0005 0093 OCR3CH=0x00;
0001c3 93e0 0083 	STS  131,R30
                 ; 0005 0094 OCR3CL=0x00;
0001c5 93e0 0082 	STS  130,R30
                 ; 0005 0095 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0005 0096 TIMSK=0x04;
0001c7 e0e4      	LDI  R30,LOW(4)
0001c8 bfe7      	OUT  0x37,R30
                 ; 0005 0097 ETIMSK=0x04;
0001c9 93e0 007d 	STS  125,R30
                 ; 0005 0098 distance4perStep = (double)(PI * TIRE_RAD / (double)MOTOR_STEP);
                +
0001cb e4eb     +LDI R30 , LOW ( 0x3ECD154B )
0001cc e1f5     +LDI R31 , HIGH ( 0x3ECD154B )
0001cd ec6d     +LDI R22 , BYTE3 ( 0x3ECD154B )
0001ce e37e     +LDI R23 , BYTE4 ( 0x3ECD154B )
                 	__GETD1N 0x3ECD154B
0001cf 940e 0312 	CALL __PUTD1S0
                 ; 0005 0099 Information.nStep4perBlock = (int)((double)180. / distance4perStep);
                +
0001d1 e0a0     +LDI R26 , LOW ( 0x43340000 )
0001d2 e0b0     +LDI R27 , HIGH ( 0x43340000 )
0001d3 e384     +LDI R24 , BYTE3 ( 0x43340000 )
0001d4 e493     +LDI R25 , BYTE4 ( 0x43340000 )
                 	__GETD2N 0x43340000
0001d5 940e 029b 	CALL __DIVF21
0001d7 940e 0254 	CALL __CFD1
0001d9 93e0 0510 	STS  _Information,R30
0001db 93f0 0511 	STS  _Information+1,R31
                 ; 0005 009A Information.nStep4Turn90 = (int)((PI*MOUSE_WIDTH/4.)/distance4perStep);
0001dd 940e 030d 	CALL __GETD1S0
                +
0001df e2a8     +LDI R26 , LOW ( 0x4280CE28 )
0001e0 ecbe     +LDI R27 , HIGH ( 0x4280CE28 )
0001e1 e880     +LDI R24 , BYTE3 ( 0x4280CE28 )
0001e2 e492     +LDI R25 , BYTE4 ( 0x4280CE28 )
                 	__GETD2N 0x4280CE28
0001e3 940e 029b 	CALL __DIVF21
0001e5 940e 0254 	CALL __CFD1
                +
0001e7 93e0 0512+STS _Information + ( 2 ) , R30
0001e9 93f0 0513+STS _Information + ( 2 ) + 1 , R31
                 	__PUTW1MN _Information,2
                 ; 0005 009B }
0001eb 9624      	ADIW R28,4
0001ec 9508      	RET
                 ;
                 ;
                 ;
                 ;
                 ;void Direction(int mode)
                 ; 0005 00A1 {
                 ; 0005 00A2 int LStepCount = 0, RStepCount = 0;
                 ; 0005 00A3 TCCR1B = 0x04;
                 ;	mode -> Y+4
                 ;	LStepCount -> R16,R17
                 ;	RStepCount -> R18,R19
                 ; 0005 00A4 TCCR3B = 0x04;
                 ; 0005 00A5 direction_control = mode;
                 ; 0005 00A6 Flag.LmotorRun = FALSE;
                 ; 0005 00A7 Flag.RmotorRun = FALSE;
                 ; 0005 00A8 switch(mode)
                 ; 0005 00A9 {
                 ; 0005 00AA case FORWARD:
                 ; 0005 00AB while(LStepCount<Information.nStep4perBlock || RStepCount<Information.nStep4perBlock)
                 ; 0005 00AC {
                 ; 0005 00AD if(Flag.LmotorRun)
                 ; 0005 00AE {
                 ; 0005 00AF LStepCount++;
                 ; 0005 00B0 Flag.LmotorRun = FALSE;
                 ; 0005 00B1 }
                 ; 0005 00B2 if(Flag.RmotorRun)
                 ; 0005 00B3 {
                 ; 0005 00B4 RStepCount++;
                 ; 0005 00B5 Flag.RmotorRun = FALSE;
                 ; 0005 00B6 }
                 ; 0005 00B7 }
                 ; 0005 00B8 break;
                 ; 0005 00B9 case HALF:
                 ; 0005 00BA while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
                 ; 0005 00BB {
                 ; 0005 00BC if(Flag.LmotorRun)
                 ; 0005 00BD {
                 ; 0005 00BE LStepCount++;
                 ; 0005 00BF Flag.LmotorRun = FALSE;
                 ; 0005 00C0 }
                 ; 0005 00C1 if(Flag.RmotorRun)
                 ; 0005 00C2 {
                 ; 0005 00C3 RStepCount++;
                 ; 0005 00C4 Flag.RmotorRun = FALSE;
                 ; 0005 00C5 }
                 ; 0005 00C6 }
                 ; 0005 00C7 break;
                 ; 0005 00C8 case LEFT:
                 ; 0005 00C9 case RIGHT:
                 ; 0005 00CA while(LStepCount<Information.nStep4Turn90 || RStepCount<Information.nStep4Turn90)
                 ; 0005 00CB {
                 ; 0005 00CC if(Flag.LmotorRun)
                 ; 0005 00CD {
                 ; 0005 00CE LStepCount++;
                 ; 0005 00CF Flag.LmotorRun = FALSE;
                 ; 0005 00D0 }
                 ; 0005 00D1 if(Flag.RmotorRun)
                 ; 0005 00D2 {
                 ; 0005 00D3 RStepCount++;
                 ; 0005 00D4 Flag.RmotorRun = FALSE;
                 ; 0005 00D5 }
                 ; 0005 00D6 }
                 ; 0005 00D7 break;
                 ; 0005 00D8 case BACK:
                 ; 0005 00D9 while(LStepCount<(Information.nStep4Turn90*2) || RStepCount<(Information.nStep4Turn90*2))
                 ; 0005 00DA {
                 ; 0005 00DB if(Flag.LmotorRun)
                 ; 0005 00DC {
                 ; 0005 00DD LStepCount++;
                 ; 0005 00DE Flag.LmotorRun = FALSE;
                 ; 0005 00DF }
                 ; 0005 00E0 if(Flag.RmotorRun)
                 ; 0005 00E1 {
                 ; 0005 00E2 RStepCount++;
                 ; 0005 00E3 Flag.RmotorRun = FALSE;
                 ; 0005 00E4 }
                 ; 0005 00E5 }
                 ; 0005 00E6 break;
                 ; 0005 00E7 }
                 ; 0005 00E8 TCCR1B = 0x00;
                 ; 0005 00E9 TCCR3B = 0x00;
                 ; 0005 00EA }
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rotateR:
000500           	.BYTE 0x8
                 _rotateL:
000508           	.BYTE 0x8
                 _Information:
000510           	.BYTE 0x4
                 _Flag:
000514           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
0001ed 920a      	ST   -Y,R0
0001ee 921a      	ST   -Y,R1
0001ef 92fa      	ST   -Y,R15
0001f0 936a      	ST   -Y,R22
0001f1 937a      	ST   -Y,R23
0001f2 938a      	ST   -Y,R24
0001f3 939a      	ST   -Y,R25
0001f4 93aa      	ST   -Y,R26
0001f5 93ba      	ST   -Y,R27
0001f6 93ea      	ST   -Y,R30
0001f7 93fa      	ST   -Y,R31
0001f8 b7ef      	IN   R30,SREG
0001f9 93ea      	ST   -Y,R30
0001fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
0001fb 920a      	ST   -Y,R0
0001fc 921a      	ST   -Y,R1
0001fd 939a      	ST   -Y,R25
0001fe 93aa      	ST   -Y,R26
0001ff 93ba      	ST   -Y,R27
000200 93ea      	ST   -Y,R30
000201 93fa      	ST   -Y,R31
000202 b7ef      	IN   R30,SREG
000203 93ea      	ST   -Y,R30
000204 2ded      	MOV  R30,R13
000205 e0f0      	LDI  R31,0
000206 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
000207 b202      	IN   R0,18
000208 e0a8      	LDI  R26,LOW(_rotateL)
000209 e0b5      	LDI  R27,HIGH(_rotateL)
00020a 0da4      	ADD  R26,R4
00020b 1db5      	ADC  R27,R5
00020c 91ec      	LD   R30,X
00020d 95e2      	SWAP R30
00020e 7fe0      	ANDI R30,0xF0
00020f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3:
000210 b003      	IN   R0,3
000211 e0a0      	LDI  R26,LOW(_rotateR)
000212 e0b5      	LDI  R27,HIGH(_rotateR)
000213 0da6      	ADD  R26,R6
000214 1db7      	ADC  R27,R7
000215 91ec      	LD   R30,X
000216 95e2      	SWAP R30
000217 7fe0      	ANDI R30,0xF0
000218 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000219 91e9      	ld   r30,y+
00021a 91f9      	ld   r31,y+
00021b 9630      	adiw r30,0
00021c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00021d ea80     +LDI R24 , LOW ( 0xFA0 )
00021e e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00021f 9701     +SBIW R24 , 1
000220 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000221 95a8      	wdr
000222 9731      	sbiw r30,1
000223 f7c9      	brne __delay_ms0
                 __delay_ms1:
000224 9508      	ret
                 
                 __ROUND_REPACK:
000225 2355      	TST  R21
000226 f442      	BRPL __REPACK
000227 3850      	CPI  R21,0x80
000228 f411      	BRNE __ROUND_REPACK0
000229 ffe0      	SBRS R30,0
00022a c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00022b 9631      	ADIW R30,1
00022c 1f69      	ADC  R22,R25
00022d 1f79      	ADC  R23,R25
00022e f06b      	BRVS __REPACK1
                 
                 __REPACK:
00022f e850      	LDI  R21,0x80
000230 2757      	EOR  R21,R23
000231 f411      	BRNE __REPACK0
000232 935f      	PUSH R21
000233 c055      	RJMP __ZERORES
                 __REPACK0:
000234 3f5f      	CPI  R21,0xFF
000235 f031      	BREQ __REPACK1
000236 0f66      	LSL  R22
000237 0c00      	LSL  R0
000238 9557      	ROR  R21
000239 9567      	ROR  R22
00023a 2f75      	MOV  R23,R21
00023b 9508      	RET
                 __REPACK1:
00023c 935f      	PUSH R21
00023d 2000      	TST  R0
00023e f00a      	BRMI __REPACK2
00023f c055      	RJMP __MAXRES
                 __REPACK2:
000240 c04e      	RJMP __MINRES
                 
                 __UNPACK:
000241 e850      	LDI  R21,0x80
000242 2e19      	MOV  R1,R25
000243 2215      	AND  R1,R21
000244 0f88      	LSL  R24
000245 1f99      	ROL  R25
000246 2795      	EOR  R25,R21
000247 0f55      	LSL  R21
000248 9587      	ROR  R24
                 
                 __UNPACK1:
000249 e850      	LDI  R21,0x80
00024a 2e07      	MOV  R0,R23
00024b 2205      	AND  R0,R21
00024c 0f66      	LSL  R22
00024d 1f77      	ROL  R23
00024e 2775      	EOR  R23,R21
00024f 0f55      	LSL  R21
000250 9567      	ROR  R22
000251 9508      	RET
                 
                 __CFD1U:
000252 9468      	SET
000253 c001      	RJMP __CFD1U0
                 __CFD1:
000254 94e8      	CLT
                 __CFD1U0:
000255 935f      	PUSH R21
000256 dff2      	RCALL __UNPACK1
000257 3870      	CPI  R23,0x80
000258 f018      	BRLO __CFD10
000259 3f7f      	CPI  R23,0xFF
00025a f408      	BRCC __CFD10
00025b c02d      	RJMP __ZERORES
                 __CFD10:
00025c e156      	LDI  R21,22
00025d 1b57      	SUB  R21,R23
00025e f4aa      	BRPL __CFD11
00025f 9551      	NEG  R21
000260 3058      	CPI  R21,8
000261 f40e      	BRTC __CFD19
000262 3059      	CPI  R21,9
                 __CFD19:
000263 f030      	BRLO __CFD17
000264 efef      	SER  R30
000265 efff      	SER  R31
000266 ef6f      	SER  R22
000267 e77f      	LDI  R23,0x7F
000268 f977      	BLD  R23,7
000269 c01a      	RJMP __CFD15
                 __CFD17:
00026a 2777      	CLR  R23
00026b 2355      	TST  R21
00026c f0b9      	BREQ __CFD15
                 __CFD18:
00026d 0fee      	LSL  R30
00026e 1fff      	ROL  R31
00026f 1f66      	ROL  R22
000270 1f77      	ROL  R23
000271 955a      	DEC  R21
000272 f7d1      	BRNE __CFD18
000273 c010      	RJMP __CFD15
                 __CFD11:
000274 2777      	CLR  R23
                 __CFD12:
000275 3058      	CPI  R21,8
000276 f028      	BRLO __CFD13
000277 2fef      	MOV  R30,R31
000278 2ff6      	MOV  R31,R22
000279 2f67      	MOV  R22,R23
00027a 5058      	SUBI R21,8
00027b cff9      	RJMP __CFD12
                 __CFD13:
00027c 2355      	TST  R21
00027d f031      	BREQ __CFD15
                 __CFD14:
00027e 9576      	LSR  R23
00027f 9567      	ROR  R22
000280 95f7      	ROR  R31
000281 95e7      	ROR  R30
000282 955a      	DEC  R21
000283 f7d1      	BRNE __CFD14
                 __CFD15:
000284 2000      	TST  R0
000285 f40a      	BRPL __CFD16
000286 d05d      	RCALL __ANEGD1
                 __CFD16:
000287 915f      	POP  R21
000288 9508      	RET
                 
                 __ZERORES:
000289 27ee      	CLR  R30
00028a 27ff      	CLR  R31
00028b 2766      	CLR  R22
00028c 2777      	CLR  R23
00028d 915f      	POP  R21
00028e 9508      	RET
                 
                 __MINRES:
00028f efef      	SER  R30
000290 efff      	SER  R31
000291 e76f      	LDI  R22,0x7F
000292 ef7f      	SER  R23
000293 915f      	POP  R21
000294 9508      	RET
                 
                 __MAXRES:
000295 efef      	SER  R30
000296 efff      	SER  R31
000297 e76f      	LDI  R22,0x7F
000298 e77f      	LDI  R23,0x7F
000299 915f      	POP  R21
00029a 9508      	RET
                 
                 __DIVF21:
00029b 935f      	PUSH R21
00029c dfa4      	RCALL __UNPACK
00029d 3870      	CPI  R23,0x80
00029e f421      	BRNE __DIVF210
00029f 2011      	TST  R1
                 __DIVF211:
0002a0 f40a      	BRPL __DIVF219
0002a1 cfed      	RJMP __MINRES
                 __DIVF219:
0002a2 cff2      	RJMP __MAXRES
                 __DIVF210:
0002a3 3890      	CPI  R25,0x80
0002a4 f409      	BRNE __DIVF218
                 __DIVF217:
0002a5 cfe3      	RJMP __ZERORES
                 __DIVF218:
0002a6 2401      	EOR  R0,R1
0002a7 9408      	SEC
0002a8 0b97      	SBC  R25,R23
0002a9 f41b      	BRVC __DIVF216
0002aa f3d4      	BRLT __DIVF217
0002ab 2000      	TST  R0
0002ac cff3      	RJMP __DIVF211
                 __DIVF216:
0002ad 2f79      	MOV  R23,R25
0002ae 931f      	PUSH R17
0002af 932f      	PUSH R18
0002b0 933f      	PUSH R19
0002b1 934f      	PUSH R20
0002b2 2411      	CLR  R1
0002b3 2711      	CLR  R17
0002b4 2722      	CLR  R18
0002b5 2733      	CLR  R19
0002b6 2744      	CLR  R20
0002b7 2755      	CLR  R21
0002b8 e290      	LDI  R25,32
                 __DIVF212:
0002b9 17ae      	CP   R26,R30
0002ba 07bf      	CPC  R27,R31
0002bb 0786      	CPC  R24,R22
0002bc 0741      	CPC  R20,R17
0002bd f030      	BRLO __DIVF213
0002be 1bae      	SUB  R26,R30
0002bf 0bbf      	SBC  R27,R31
0002c0 0b86      	SBC  R24,R22
0002c1 0b41      	SBC  R20,R17
0002c2 9408      	SEC
0002c3 c001      	RJMP __DIVF214
                 __DIVF213:
0002c4 9488      	CLC
                 __DIVF214:
0002c5 1f55      	ROL  R21
0002c6 1f22      	ROL  R18
0002c7 1f33      	ROL  R19
0002c8 1c11      	ROL  R1
0002c9 1faa      	ROL  R26
0002ca 1fbb      	ROL  R27
0002cb 1f88      	ROL  R24
0002cc 1f44      	ROL  R20
0002cd 959a      	DEC  R25
0002ce f751      	BRNE __DIVF212
0002cf 01f9      	MOVW R30,R18
0002d0 2d61      	MOV  R22,R1
0002d1 914f      	POP  R20
0002d2 913f      	POP  R19
0002d3 912f      	POP  R18
0002d4 911f      	POP  R17
0002d5 2366      	TST  R22
0002d6 f032      	BRMI __DIVF215
0002d7 0f55      	LSL  R21
0002d8 1fee      	ROL  R30
0002d9 1fff      	ROL  R31
0002da 1f66      	ROL  R22
0002db 957a      	DEC  R23
0002dc f243      	BRVS __DIVF217
                 __DIVF215:
0002dd df47      	RCALL __ROUND_REPACK
0002de 915f      	POP  R21
0002df 9508      	RET
                 
                 __ANEGW1:
0002e0 95f1      	NEG  R31
0002e1 95e1      	NEG  R30
0002e2 40f0      	SBCI R31,0
0002e3 9508      	RET
                 
                 __ANEGD1:
0002e4 95f0      	COM  R31
0002e5 9560      	COM  R22
0002e6 9570      	COM  R23
0002e7 95e1      	NEG  R30
0002e8 4fff      	SBCI R31,-1
0002e9 4f6f      	SBCI R22,-1
0002ea 4f7f      	SBCI R23,-1
0002eb 9508      	RET
                 
                 __DIVW21U:
0002ec 2400      	CLR  R0
0002ed 2411      	CLR  R1
0002ee e190      	LDI  R25,16
                 __DIVW21U1:
0002ef 0faa      	LSL  R26
0002f0 1fbb      	ROL  R27
0002f1 1c00      	ROL  R0
0002f2 1c11      	ROL  R1
0002f3 1a0e      	SUB  R0,R30
0002f4 0a1f      	SBC  R1,R31
0002f5 f418      	BRCC __DIVW21U2
0002f6 0e0e      	ADD  R0,R30
0002f7 1e1f      	ADC  R1,R31
0002f8 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002f9 60a1      	SBR  R26,1
                 __DIVW21U3:
0002fa 959a      	DEC  R25
0002fb f799      	BRNE __DIVW21U1
0002fc 01fd      	MOVW R30,R26
0002fd 01d0      	MOVW R26,R0
0002fe 9508      	RET
                 
                 __MODW21:
0002ff 94e8      	CLT
000300 ffb7      	SBRS R27,7
000301 c004      	RJMP __MODW211
000302 95a0      	COM  R26
000303 95b0      	COM  R27
000304 9611      	ADIW R26,1
000305 9468      	SET
                 __MODW211:
000306 fdf7      	SBRC R31,7
000307 dfd8      	RCALL __ANEGW1
000308 dfe3      	RCALL __DIVW21U
000309 01fd      	MOVW R30,R26
00030a f40e      	BRTC __MODW212
00030b dfd4      	RCALL __ANEGW1
                 __MODW212:
00030c 9508      	RET
                 
                 __GETD1S0:
00030d 81e8      	LD   R30,Y
00030e 81f9      	LDD  R31,Y+1
00030f 816a      	LDD  R22,Y+2
000310 817b      	LDD  R23,Y+3
000311 9508      	RET
                 
                 __PUTD1S0:
000312 83e8      	ST   Y,R30
000313 83f9      	STD  Y+1,R31
000314 836a      	STD  Y+2,R22
000315 837b      	STD  Y+3,R23
000316 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  36 r1 :  16 r2 :   0 r3 :   0 r4 :   9 r5 :   2 r6 :   9 r7 :   2 
r8 :   1 r9 :   1 r10:   1 r11:   1 r12:   0 r13:   1 r14:   0 r15:   2 
r16:   0 r17:   5 r18:   5 r19:   4 r20:   6 r21:  38 r22:  27 r23:  30 
r24:  19 r25:  21 r26:  45 r27:  19 r28:   3 r29:   1 r30: 215 r31:  51 
x  :   5 y  :  52 z  :   7 
Registers used: 30 out of 35 (85.7%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   3 
adiw  :   6 and   :   6 andi  :  11 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   8 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   1 brmi  :   2 brne  :  20 brpl  :   4 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :  25 
cbi   :   0 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :   3 cpc   :  15 cpi   :  19 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  12 inc   :   0 jmp   :  36 ld    :  25 ldd   :   3 
ldi   :  83 lds   :   4 lpm   :   7 lsl   :   9 lsr   :   1 mov   :  12 
movw  :  21 mul   :   0 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   4 ori   :   4 out   :  44 pop   :   9 push  :   8 rcall :   8 
ret   :  23 reti  :   2 rjmp  :  26 rol   :  19 ror   :   7 sbc   :   5 
sbci  :   4 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   1 
sbrc  :   1 sbrs  :   2 sec   :   2 seh   :   0 sei   :   1 sen   :   0 
ser   :   8 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  26 std   :   3 sts   :  35 sub   :   3 subi  :   5 
swap  :   2 tst   :   8 wdr   :   1 
Instructions used: 69 out of 117 (59.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00062e   1534     48   1582  131072   1.2%
[.dseg] 0x000100 0x000516      0     22     22    4351   0.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
