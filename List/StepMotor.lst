
AVRASM ver. 2.1.30  C:\Users\±èµ¿¿í\Documents\StepMotor\List\StepMotor.asm Wed Oct 28 16:58:44 2020

C:\Users\±èµ¿¿í\Documents\StepMotor\List\StepMotor.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\StepMotor.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\StepMotor.asm(1063): warning: Register r8 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\StepMotor.asm(1064): warning: Register r10 already defined by the .DEF directive
C:\Users\±èµ¿¿í\Documents\StepMotor\List\StepMotor.asm(1065): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _LeftstepCount=R4
                 	.DEF _RightstepCount=R6
                 	.DEF _VelocityLeftmotorTCNT1=R8
                 	.DEF _VelocityRightmotorTCNT3=R10
                 	.DEF _direction_control=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0060 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0093 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 00da 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00004f 0109
000050 0405
000051 0206
000052 080a      	.DB  0x9,0x1,0x5,0x4,0x6,0x2,0xA,0x8
                 _0x4:
000053 0809
000054 020a
000055 0406
000056 0105      	.DB  0x9,0x8,0xA,0x2,0x6,0x4,0x5,0x1
                 _0x0:
000057 6425
C:\Users\±èµ¿¿í\Documents\StepMotor\List\StepMotor.asm(1121): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x25,0x64,0x0
                 
                 __GLOBAL_INI_TBL:
000059 0008      	.DW  0x08
00005a 0500      	.DW  _rotateR
00005b 009e      	.DW  _0x3*2
                 
00005c 0008      	.DW  0x08
00005d 0508      	.DW  _rotateL
00005e 00a6      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
00005f 0000      	.DW  0
                 
                 __RESET:
000060 94f8      	CLI
000061 27ee      	CLR  R30
000062 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000063 e0f1      	LDI  R31,1
000064 bff5      	OUT  MCUCR,R31
000065 bfe5      	OUT  MCUCR,R30
000066 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000068 e1f8      	LDI  R31,0x18
000069 bdf1      	OUT  WDTCR,R31
00006a bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00006b e08d      	LDI  R24,(14-2)+1
00006c e0a2      	LDI  R26,2
00006d 27bb      	CLR  R27
                 __CLEAR_REG:
00006e 93ed      	ST   X+,R30
00006f 958a      	DEC  R24
000070 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000071 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000072 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000073 e0a0      	LDI  R26,LOW(__SRAM_START)
000074 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 ebe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00008a bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008c bfed      	OUT  SPL,R30
00008d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000090 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000091 940c 0187 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "StepMotor.h"
                 ;#include "Sensor.h"
                 ;#include "UART.h"
                 ;#define PI       3.14159265358979323846
                 ;
                 ;// Declare your global variables here
                 ;char rotateR[8] = {0b1001,0b0001,0b0101,0b0100,0b0110,0b0010,0b1010,0b1000};
                 
                 	.DSEG
                 ;//R¸ðÅÍ°¡ ÀüÁøÇÏ±â À§ÇÑ 8step
                 ;char rotateL[8] = {0b1001,0b1000,0b1010,0b0010,0b0110,0b0100,0b0101,0b0001};
                 ;//L¸ðÅÍ°¡ ÀüÁøÇÏ±â À§ÇÑ 8step
                 ;int LeftstepCount, RightstepCount; // rotateR°ú rotateLÀÇ °¢°¢ ½ºÅÜÀÌ ¸ðÅÍ¿¡ ¼ø¼­´ë·Î ÀÔ·ÂµÇµµ·Ï Count
                 ;unsigned int VelocityLeftmotorTCNT1, VelocityRightmotorTCNT3; // ¿ÞÂÊ°ú ¿À¸¥ÂÊ ¸ðÅÍÀÇ TCNT ¼Óµµ
                 ;unsigned char direction_control; // ÀÎÅÍ·´Æ® ·çÆ¾¿¡ ¹æÇâÁ¤º¸¸¦ Àü´ÞÇÏ±â À§ÇÑ Àü¿ªº¯¼ö
                 ;
                 ;int L_motorspeed=0;
                 ;int R_motorspeed=0;
                 ;int sensor_value=0;
                 ;
                 ;struct {
                 ;int nStep4perBlock; // ÇÑ ºí·Ï ÀÌµ¿½Ã ÇÊ¿äÇÑ ¸ðÅÍÈ¸Àü ½ºÅÜ Á¤º¸
                 ;int nStep4Turn90; // 90µµ ÅÏ ÀÌµ¿½Ã ÇÊ¿äÇÑ ¸ðÅÍÈ¸Àü ½ºÅÜ Á¤º¸
                 ;} Information;
                 ;struct {
                 ;char LmotorRun; // ¿ÞÂÊ ¸ðÅÍ°¡ È¸ÀüÇß´ÂÁö¿¡ ´ëÇÑ Flag
                 ;char RmotorRun; // ¿À¸¥ÂÊ ¸ðÅÍ°¡ È¸ÀüÇß´ÂÁö¿¡ ´ëÇÑ Flag
                 ;} Flag;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;// Timer 1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0025 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
000093 940e 0380 	CALL SUBOPT_0x0
                 ; 0000 0026 // Place your code here
                 ; 0000 0027 switch(direction_control)
                 ; 0000 0028 {
                 ; 0000 0029 case LEFT:
000095 30e5      	CPI  R30,LOW(0x5)
000096 e0a0      	LDI  R26,HIGH(0x5)
000097 07fa      	CPC  R31,R26
000098 f4a1      	BRNE _0x8
                 ; 0000 002A PORTD |= (rotateL[LeftstepCount]<<4);
000099 940e 038c 	CALL SUBOPT_0x1
00009b 29e0      	OR   R30,R0
00009c bbe2      	OUT  0x12,R30
                 ; 0000 002B PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
00009d 940e 038c 	CALL SUBOPT_0x1
00009f 5fe1      	SUBI R30,-LOW(15)
0000a0 21e0      	AND  R30,R0
0000a1 bbe2      	OUT  0x12,R30
                 ; 0000 002C LeftstepCount--;
0000a2 01f2      	MOVW R30,R4
0000a3 9731      	SBIW R30,1
0000a4 012f      	MOVW R4,R30
                 ; 0000 002D if(LeftstepCount < 0)
0000a5 2400      	CLR  R0
0000a6 1440      	CP   R4,R0
0000a7 0450      	CPC  R5,R0
0000a8 f41c      	BRGE _0x9
                 ; 0000 002E LeftstepCount = sizeof(rotateL)-1;
0000a9 e0e7      	LDI  R30,LOW(7)
0000aa e0f0      	LDI  R31,HIGH(7)
0000ab 012f      	MOVW R4,R30
                 ; 0000 002F break;
                 _0x9:
0000ac c024      	RJMP _0x7
                 ; 0000 0030 case RIGHT:
                 _0x8:
0000ad 30e6      	CPI  R30,LOW(0x6)
0000ae e0a0      	LDI  R26,HIGH(0x6)
0000af 07fa      	CPC  R31,R26
0000b0 f021      	BREQ _0xB
                 ; 0000 0031 case BACK:
0000b1 30e7      	CPI  R30,LOW(0x7)
0000b2 e0a0      	LDI  R26,HIGH(0x7)
0000b3 07fa      	CPC  R31,R26
0000b4 f409      	BRNE _0xC
                 _0xB:
                 ; 0000 0032 case FORWARD:
0000b5 c004      	RJMP _0xD
                 _0xC:
0000b6 30e4      	CPI  R30,LOW(0x4)
0000b7 e0a0      	LDI  R26,HIGH(0x4)
0000b8 07fa      	CPC  R31,R26
0000b9 f409      	BRNE _0xE
                 _0xD:
                 ; 0000 0033 case HALF:
0000ba c004      	RJMP _0xF
                 _0xE:
0000bb 30e8      	CPI  R30,LOW(0x8)
0000bc e0a0      	LDI  R26,HIGH(0x8)
0000bd 07fa      	CPC  R31,R26
0000be f491      	BRNE _0x7
                 _0xF:
                 ; 0000 0034 PORTD |= (rotateL[LeftstepCount]<<4);
0000bf 940e 038c 	CALL SUBOPT_0x1
0000c1 29e0      	OR   R30,R0
0000c2 bbe2      	OUT  0x12,R30
                 ; 0000 0035 PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
0000c3 940e 038c 	CALL SUBOPT_0x1
0000c5 5fe1      	SUBI R30,-LOW(15)
0000c6 21e0      	AND  R30,R0
0000c7 bbe2      	OUT  0x12,R30
                 ; 0000 0036 LeftstepCount++;
0000c8 01f2      	MOVW R30,R4
0000c9 9631      	ADIW R30,1
0000ca 012f      	MOVW R4,R30
                 ; 0000 0037 LeftstepCount %= sizeof(rotateL);
0000cb 01d2      	MOVW R26,R4
0000cc e0e8      	LDI  R30,LOW(8)
0000cd e0f0      	LDI  R31,HIGH(8)
0000ce 940e 04bb 	CALL __MODW21
0000d0 012f      	MOVW R4,R30
                 ; 0000 0038 break;
                 ; 0000 0039 }
                 _0x7:
                 ; 0000 003A Flag.LmotorRun = TRUE;
0000d1 e0e1      	LDI  R30,LOW(1)
0000d2 93e0 0514 	STS  _Flag,R30
                 ; 0000 003B TCNT1H = VelocityLeftmotorTCNT1 >> 8;
0000d4 2de9      	MOV  R30,R9
0000d5 70f0      	ANDI R31,HIGH(0x0)
0000d6 bded      	OUT  0x2D,R30
                 ; 0000 003C TCNT1L = VelocityLeftmotorTCNT1 & 0xff;
0000d7 2de8      	MOV  R30,R8
0000d8 bdec      	OUT  0x2C,R30
                 ; 0000 003D }
0000d9 c045      	RJMP _0x46
                 ;// Timer 3 overflow interrupt service routine
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
                 ; 0000 0040 {
                 _timer3_ovf_isr:
0000da 940e 0380 	CALL SUBOPT_0x0
                 ; 0000 0041 // Place your code here
                 ; 0000 0042 switch(direction_control)
                 ; 0000 0043 {
                 ; 0000 0044 case RIGHT:
0000dc 30e6      	CPI  R30,LOW(0x6)
0000dd e0a0      	LDI  R26,HIGH(0x6)
0000de 07fa      	CPC  R31,R26
0000df f021      	BREQ _0x15
                 ; 0000 0045 case BACK:
0000e0 30e7      	CPI  R30,LOW(0x7)
0000e1 e0a0      	LDI  R26,HIGH(0x7)
0000e2 07fa      	CPC  R31,R26
0000e3 f4a1      	BRNE _0x16
                 _0x15:
                 ; 0000 0046 PORTE |= (rotateR[RightstepCount]<<4);
0000e4 940e 0395 	CALL SUBOPT_0x2
0000e6 29e0      	OR   R30,R0
0000e7 b9e3      	OUT  0x3,R30
                 ; 0000 0047 PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
0000e8 940e 0395 	CALL SUBOPT_0x2
0000ea 5fe1      	SUBI R30,-LOW(15)
0000eb 21e0      	AND  R30,R0
0000ec b9e3      	OUT  0x3,R30
                 ; 0000 0048 RightstepCount--;
0000ed 01f3      	MOVW R30,R6
0000ee 9731      	SBIW R30,1
0000ef 013f      	MOVW R6,R30
                 ; 0000 0049 if(RightstepCount < 0)
0000f0 2400      	CLR  R0
0000f1 1460      	CP   R6,R0
0000f2 0470      	CPC  R7,R0
0000f3 f41c      	BRGE _0x17
                 ; 0000 004A RightstepCount = sizeof(rotateR)-1;
0000f4 e0e7      	LDI  R30,LOW(7)
0000f5 e0f0      	LDI  R31,HIGH(7)
0000f6 013f      	MOVW R6,R30
                 ; 0000 004B break;
                 _0x17:
0000f7 c01f      	RJMP _0x13
                 ; 0000 004C case FORWARD:
                 _0x16:
0000f8 30e4      	CPI  R30,LOW(0x4)
0000f9 e0a0      	LDI  R26,HIGH(0x4)
0000fa 07fa      	CPC  R31,R26
0000fb f021      	BREQ _0x19
                 ; 0000 004D case HALF:
0000fc 30e8      	CPI  R30,LOW(0x8)
0000fd e0a0      	LDI  R26,HIGH(0x8)
0000fe 07fa      	CPC  R31,R26
0000ff f409      	BRNE _0x1A
                 _0x19:
                 ; 0000 004E case LEFT:
000100 c004      	RJMP _0x1B
                 _0x1A:
000101 30e5      	CPI  R30,LOW(0x5)
000102 e0a0      	LDI  R26,HIGH(0x5)
000103 07fa      	CPC  R31,R26
000104 f491      	BRNE _0x13
                 _0x1B:
                 ; 0000 004F PORTE |= (rotateR[RightstepCount]<<4);
000105 940e 0395 	CALL SUBOPT_0x2
000107 29e0      	OR   R30,R0
000108 b9e3      	OUT  0x3,R30
                 ; 0000 0050 PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
000109 940e 0395 	CALL SUBOPT_0x2
00010b 5fe1      	SUBI R30,-LOW(15)
00010c 21e0      	AND  R30,R0
00010d b9e3      	OUT  0x3,R30
                 ; 0000 0051 RightstepCount++;
00010e 01f3      	MOVW R30,R6
00010f 9631      	ADIW R30,1
000110 013f      	MOVW R6,R30
                 ; 0000 0052 RightstepCount %= sizeof(rotateR);
000111 01d3      	MOVW R26,R6
000112 e0e8      	LDI  R30,LOW(8)
000113 e0f0      	LDI  R31,HIGH(8)
000114 940e 04bb 	CALL __MODW21
000116 013f      	MOVW R6,R30
                 ; 0000 0053 break;
                 ; 0000 0054 }
                 _0x13:
                 ; 0000 0055 Flag.RmotorRun = TRUE;
000117 e0e1      	LDI  R30,LOW(1)
                +
000118 93e0 0515+STS _Flag + ( 1 ) , R30
                 	__PUTB1MN _Flag,1
                 ; 0000 0056 TCNT3H = VelocityRightmotorTCNT3 >> 8;
00011a 92b0 0089 	STS  137,R11
                 ; 0000 0057 TCNT3L = VelocityRightmotorTCNT3 & 0xff;
00011c 2dea      	MOV  R30,R10
00011d 93e0 0088 	STS  136,R30
                 ; 0000 0058 }
                 _0x46:
00011f 91e9      	LD   R30,Y+
000120 bfef      	OUT  SREG,R30
000121 91f9      	LD   R31,Y+
000122 91e9      	LD   R30,Y+
000123 91b9      	LD   R27,Y+
000124 91a9      	LD   R26,Y+
000125 9199      	LD   R25,Y+
000126 9019      	LD   R1,Y+
000127 9009      	LD   R0,Y+
000128 9518      	RETI
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void InitializeStepMotor(void)
                 ; 0000 005F {
                 _InitializeStepMotor:
                 ; 0000 0060 double distance4perStep;
                 ; 0000 0061 
                 ; 0000 0062 // LEFT MOTOR - PORTD 4,5,6,7
                 ; 0000 0063 PORTD&=0x0F;
000129 9724      	SBIW R28,4
                 ;	distance4perStep -> Y+0
00012a b3e2      	IN   R30,0x12
00012b 70ef      	ANDI R30,LOW(0xF)
00012c bbe2      	OUT  0x12,R30
                 ; 0000 0064 DDRD|=0xF0;
00012d b3e1      	IN   R30,0x11
00012e 6fe0      	ORI  R30,LOW(0xF0)
00012f bbe1      	OUT  0x11,R30
                 ; 0000 0065 // RIGHT MOTOR - PORTE 4,5,6,7
                 ; 0000 0066 PORTE&=0x0F;
000130 b1e3      	IN   R30,0x3
000131 70ef      	ANDI R30,LOW(0xF)
000132 b9e3      	OUT  0x3,R30
                 ; 0000 0067 DDRE|=0xF0;
000133 b1e2      	IN   R30,0x2
000134 6fe0      	ORI  R30,LOW(0xF0)
000135 b9e2      	OUT  0x2,R30
                 ; 0000 0068 // Timer/Counter 1 initialization
                 ; 0000 0069 // Clock source: System Clock
                 ; 0000 006A // Clock value: 62.500 kHz
                 ; 0000 006B // Mode: Normal top=FFFFh
                 ; 0000 006C // OC1A output: Discon.
                 ; 0000 006D // OC1B output: Discon.
                 ; 0000 006E // OC1C output: Discon.
                 ; 0000 006F // Noise Canceler: Off
                 ; 0000 0070 // Input Capture on Falling Edge
                 ; 0000 0071 // Timer 1 Overflow Interrupt: On
                 ; 0000 0072 // Input Capture Interrupt: Off
                 ; 0000 0073 // Compare A Match Interrupt: Off
                 ; 0000 0074 // Compare B Match Interrupt: Off
                 ; 0000 0075 // Compare C Match Interrupt: Off
                 ; 0000 0076 TCCR1A=0x00;
000136 e0e0      	LDI  R30,LOW(0)
000137 bdef      	OUT  0x2F,R30
                 ; 0000 0077 TCCR1B=0x04;
000138 e0e4      	LDI  R30,LOW(4)
000139 bdee      	OUT  0x2E,R30
                 ; 0000 0078 TCNT1H=0x00;
00013a e0e0      	LDI  R30,LOW(0)
00013b bded      	OUT  0x2D,R30
                 ; 0000 0079 TCNT1L=0x00;
00013c bdec      	OUT  0x2C,R30
                 ; 0000 007A ICR1H=0x00;
00013d bde7      	OUT  0x27,R30
                 ; 0000 007B ICR1L=0x00;
00013e bde6      	OUT  0x26,R30
                 ; 0000 007C OCR1AH=0x00;
00013f bdeb      	OUT  0x2B,R30
                 ; 0000 007D OCR1AL=0x00;
000140 bdea      	OUT  0x2A,R30
                 ; 0000 007E OCR1BH=0x00;
000141 bde9      	OUT  0x29,R30
                 ; 0000 007F OCR1BL=0x00;
000142 bde8      	OUT  0x28,R30
                 ; 0000 0080 OCR1CH=0x00;
000143 93e0 0079 	STS  121,R30
                 ; 0000 0081 OCR1CL=0x00;
000145 93e0 0078 	STS  120,R30
                 ; 0000 0082 // Timer/Counter 3 initialization
                 ; 0000 0083 // Clock source: System Clock
                 ; 0000 0084 // Clock value: 62.500 kHz
                 ; 0000 0085 // Mode: Normal top=FFFFh
                 ; 0000 0086 // OC3A output: Discon.
                 ; 0000 0087 // OC3B output: Discon.
                 ; 0000 0088 // OC3C output: Discon.
                 ; 0000 0089 // Noise Canceler: Off
                 ; 0000 008A // Input Capture on Falling Edge
                 ; 0000 008B // Timer 3 Overflow Interrupt: On
                 ; 0000 008C // Input Capture Interrupt: Off
                 ; 0000 008D // Compare A Match Interrupt: Off
                 ; 0000 008E // Compare B Match Interrupt: Off
                 ; 0000 008F // Compare C Match Interrupt: Off
                 ; 0000 0090 TCCR3A=0x00;
000147 93e0 008b 	STS  139,R30
                 ; 0000 0091 TCCR3B=0x04;
000149 e0e4      	LDI  R30,LOW(4)
00014a 93e0 008a 	STS  138,R30
                 ; 0000 0092 TCNT3H=0x00;
00014c e0e0      	LDI  R30,LOW(0)
00014d 93e0 0089 	STS  137,R30
                 ; 0000 0093 TCNT3L=0x00;
00014f 93e0 0088 	STS  136,R30
                 ; 0000 0094 ICR3H=0x00;
000151 93e0 0081 	STS  129,R30
                 ; 0000 0095 ICR3L=0x00;
000153 93e0 0080 	STS  128,R30
                 ; 0000 0096 OCR3AH=0x00;
000155 93e0 0087 	STS  135,R30
                 ; 0000 0097 OCR3AL=0x00;
000157 93e0 0086 	STS  134,R30
                 ; 0000 0098 OCR3BH=0x00;
000159 93e0 0085 	STS  133,R30
                 ; 0000 0099 OCR3BL=0x00;
00015b 93e0 0084 	STS  132,R30
                 ; 0000 009A OCR3CH=0x00;
00015d 93e0 0083 	STS  131,R30
                 ; 0000 009B OCR3CL=0x00;
00015f 93e0 0082 	STS  130,R30
                 ; 0000 009C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 009D TIMSK=0x04;
000161 e0e4      	LDI  R30,LOW(4)
000162 bfe7      	OUT  0x37,R30
                 ; 0000 009E ETIMSK=0x04;
000163 93e0 007d 	STS  125,R30
                 ; 0000 009F distance4perStep = (double)(PI * TIRE_RAD / (double)MOTOR_STEP);
                +
000165 e4eb     +LDI R30 , LOW ( 0x3ECD154B )
000166 e1f5     +LDI R31 , HIGH ( 0x3ECD154B )
000167 ec6d     +LDI R22 , BYTE3 ( 0x3ECD154B )
000168 e37e     +LDI R23 , BYTE4 ( 0x3ECD154B )
                 	__GETD1N 0x3ECD154B
000169 940e 04d6 	CALL __PUTD1S0
                 ; 0000 00A0 Information.nStep4perBlock = (int)((double)180. / distance4perStep);
                +
00016b e0a0     +LDI R26 , LOW ( 0x43340000 )
00016c e0b0     +LDI R27 , HIGH ( 0x43340000 )
00016d e384     +LDI R24 , BYTE3 ( 0x43340000 )
00016e e493     +LDI R25 , BYTE4 ( 0x43340000 )
                 	__GETD2N 0x43340000
00016f 940e 0453 	CALL __DIVF21
000171 940e 040c 	CALL __CFD1
000173 93e0 0510 	STS  _Information,R30
000175 93f0 0511 	STS  _Information+1,R31
                 ; 0000 00A1 Information.nStep4Turn90 = (int)((PI*MOUSE_WIDTH/4.)/distance4perStep);
000177 940e 04d1 	CALL __GETD1S0
                +
000179 e2a8     +LDI R26 , LOW ( 0x4280CE28 )
00017a ecbe     +LDI R27 , HIGH ( 0x4280CE28 )
00017b e880     +LDI R24 , BYTE3 ( 0x4280CE28 )
00017c e492     +LDI R25 , BYTE4 ( 0x4280CE28 )
                 	__GETD2N 0x4280CE28
00017d 940e 0453 	CALL __DIVF21
00017f 940e 040c 	CALL __CFD1
                +
000181 93e0 0512+STS _Information + ( 2 ) , R30
000183 93f0 0513+STS _Information + ( 2 ) + 1 , R31
                 	__PUTW1MN _Information,2
                 ; 0000 00A2 }
000185 9624      	ADIW R28,4
000186 9508      	RET
                 ;
                 ;
                 ;
                 ;
                 ;void Direction(int mode)
                 ; 0000 00A8 {
                 ; 0000 00A9 int LStepCount = 0, RStepCount = 0;
                 ; 0000 00AA TCCR1B = 0x04;
                 ;	mode -> Y+4
                 ;	LStepCount -> R16,R17
                 ;	RStepCount -> R18,R19
                 ; 0000 00AB TCCR3B = 0x04;
                 ; 0000 00AC direction_control = mode;
                 ; 0000 00AD Flag.LmotorRun = FALSE;
                 ; 0000 00AE Flag.RmotorRun = FALSE;
                 ; 0000 00AF switch(mode)
                 ; 0000 00B0 {
                 ; 0000 00B1 case FORWARD:
                 ; 0000 00B2 while(LStepCount<Information.nStep4perBlock || RStepCount<Information.nStep4perBlock)
                 ; 0000 00B3 {
                 ; 0000 00B4 if(Flag.LmotorRun)
                 ; 0000 00B5 {
                 ; 0000 00B6 LStepCount++;
                 ; 0000 00B7 Flag.LmotorRun = FALSE;
                 ; 0000 00B8 }
                 ; 0000 00B9 if(Flag.RmotorRun)
                 ; 0000 00BA {
                 ; 0000 00BB RStepCount++;
                 ; 0000 00BC Flag.RmotorRun = FALSE;
                 ; 0000 00BD }
                 ; 0000 00BE }
                 ; 0000 00BF break;
                 ; 0000 00C0 case HALF:
                 ; 0000 00C1 while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
                 ; 0000 00C2 {
                 ; 0000 00C3 if(Flag.LmotorRun)
                 ; 0000 00C4 {
                 ; 0000 00C5 LStepCount++;
                 ; 0000 00C6 Flag.LmotorRun = FALSE;
                 ; 0000 00C7 }
                 ; 0000 00C8 if(Flag.RmotorRun)
                 ; 0000 00C9 {
                 ; 0000 00CA RStepCount++;
                 ; 0000 00CB Flag.RmotorRun = FALSE;
                 ; 0000 00CC }
                 ; 0000 00CD }
                 ; 0000 00CE break;
                 ; 0000 00CF case LEFT:
                 ; 0000 00D0 case RIGHT:
                 ; 0000 00D1 while(LStepCount<Information.nStep4Turn90 || RStepCount<Information.nStep4Turn90)
                 ; 0000 00D2 {
                 ; 0000 00D3 if(Flag.LmotorRun)
                 ; 0000 00D4 {
                 ; 0000 00D5 LStepCount++;
                 ; 0000 00D6 Flag.LmotorRun = FALSE;
                 ; 0000 00D7 }
                 ; 0000 00D8 if(Flag.RmotorRun)
                 ; 0000 00D9 {
                 ; 0000 00DA RStepCount++;
                 ; 0000 00DB Flag.RmotorRun = FALSE;
                 ; 0000 00DC }
                 ; 0000 00DD }
                 ; 0000 00DE break;
                 ; 0000 00DF case BACK:
                 ; 0000 00E0 while(LStepCount<(Information.nStep4Turn90*2) || RStepCount<(Information.nStep4Turn90*2))
                 ; 0000 00E1 {
                 ; 0000 00E2 if(Flag.LmotorRun)
                 ; 0000 00E3 {
                 ; 0000 00E4 LStepCount++;
                 ; 0000 00E5 Flag.LmotorRun = FALSE;
                 ; 0000 00E6 }
                 ; 0000 00E7 if(Flag.RmotorRun)
                 ; 0000 00E8 {
                 ; 0000 00E9 RStepCount++;
                 ; 0000 00EA Flag.RmotorRun = FALSE;
                 ; 0000 00EB }
                 ; 0000 00EC }
                 ; 0000 00ED break;
                 ; 0000 00EE }
                 ; 0000 00EF TCCR1B = 0x00;
                 ; 0000 00F0 TCCR3B = 0x00;
                 ; 0000 00F1 }
                 ;
                 ;
                 ;void main()
                 ; 0000 00F5 {
                 _main:
                 ; 0000 00F6 // Declare your local variables here
                 ; 0000 00F7 InitializeStepMotor();
000187 dfa1      	RCALL _InitializeStepMotor
                 ; 0000 00F8 InitializeSensor();
000188 d01e      	RCALL _InitializeSensor
                 ; 0000 00F9 InitializeUART();
000189 940e 01f3 	CALL _InitializeUART
                 ; 0000 00FA 
                 ; 0000 00FB LeftstepCount = 0; // ¿ÞÂÊ ¸ðÅÍÀÇ ½ºÅÜ ÃÊ±âÈ­
00018b 2444      	CLR  R4
00018c 2455      	CLR  R5
                 ; 0000 00FC RightstepCount = 0; // ¿À¸¥ÂÊ ¸ðÅÍÀÇ ½ºÅÜ ÃÊ±âÈ­
00018d 2466      	CLR  R6
00018e 2477      	CLR  R7
                 ; 0000 00FD // Global enable interrupts
                 ; 0000 00FE #asm("sei")
00018f 9478      	sei
                 ; 0000 00FF 
                 ; 0000 0100 
                 ; 0000 0101 
                 ; 0000 0102 
                 ; 0000 0103 //Direction(LEFT); // ÁÂ·Î 90µµ ÅÏ
                 ; 0000 0104 //Direction(RIGHT); // ¿ì·Î 90µµ ÅÏ
                 ; 0000 0105 //Direction(HALF); // ¹Ýºí·° ÀüÁø
                 ; 0000 0106 while (1)
                 _0x42:
                 ; 0000 0107 {
                 ; 0000 0108     printf("%d",readSensor(RIGHT_SENSOR));
                +
000190 eaee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000191 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000192 93fa      	ST   -Y,R31
000193 93ea      	ST   -Y,R30
000194 e0e2      	LDI  R30,LOW(2)
000195 93ea      	ST   -Y,R30
000196 d032      	RCALL _readSensor
000197 2766      	CLR  R22
000198 2777      	CLR  R23
000199 940e 04db 	CALL __PUTPARD1
00019b e084      	LDI  R24,4
00019c 940e 0344 	CALL _printf
00019e 9626      	ADIW R28,6
                 ; 0000 0109     delay_ms(500);
00019f efe4      	LDI  R30,LOW(500)
0001a0 e0f1      	LDI  R31,HIGH(500)
0001a1 93fa      	ST   -Y,R31
0001a2 93ea      	ST   -Y,R30
0001a3 940e 03d1 	CALL _delay_ms
                 ; 0000 010A 
                 ; 0000 010B 
                 ; 0000 010C };
0001a5 cfea      	RJMP _0x42
                 ; 0000 010D 
                 ; 0000 010E }
                 _0x45:
0001a6 cfff      	RJMP _0x45
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include "Sensor.h"
                 ;#include "UART.h"
                 ;#include "LED.h"
                 ;
                 ;#define ADC_VREF_TYPE 0x40
                 ;
                 ;void InitializeSensor(void)
                 ; 0001 000C {
                 
                 	.CSEG
                 _InitializeSensor:
                 ; 0001 000D // ¹ß±¤¼¾¼­ PORTB 5,6,7
                 ; 0001 000E PORTB &= 0x1f;
0001a7 b3e8      	IN   R30,0x18
0001a8 71ef      	ANDI R30,LOW(0x1F)
0001a9 bbe8      	OUT  0x18,R30
                 ; 0001 000F DDRB |= 0xe0;
0001aa b3e7      	IN   R30,0x17
0001ab 6ee0      	ORI  R30,LOW(0xE0)
0001ac bbe7      	OUT  0x17,R30
                 ; 0001 0010 // ¼ö±¤¼¾¼­ PORTF 0,1,2
                 ; 0001 0011 PORTF &= 0xf8;
0001ad 91e0 0062 	LDS  R30,98
0001af 7fe8      	ANDI R30,LOW(0xF8)
0001b0 93e0 0062 	STS  98,R30
                 ; 0001 0012 DDRF &= 0xf8;
0001b2 91e0 0061 	LDS  R30,97
0001b4 7fe8      	ANDI R30,LOW(0xF8)
0001b5 93e0 0061 	STS  97,R30
                 ; 0001 0013 // ADC initialization
                 ; 0001 0014 // ADC Clock frequency: 125.000 kHz
                 ; 0001 0015 // ADC Voltage Reference: AVCC pin
                 ; 0001 0016 ADMUX=ADC_VREF_TYPE;
0001b7 e4e0      	LDI  R30,LOW(64)
0001b8 b9e7      	OUT  0x7,R30
                 ; 0001 0017 ADCSRA=0x87;
0001b9 e8e7      	LDI  R30,LOW(135)
0001ba b9e6      	OUT  0x6,R30
                 ; 0001 0018 }
0001bb 9508      	RET
                 ;
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0001 001C {
                 _read_adc:
                 ; 0001 001D     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0001bc 81e8      	LD   R30,Y
0001bd 64e0      	ORI  R30,0x40
0001be b9e7      	OUT  0x7,R30
                 ; 0001 001E     // Delay needed for the stabilization of the ADC input voltage
                 ; 0001 001F     delay_us(10);
                +
0001bf e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0001c0 958a     +DEC R24
0001c1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0001 0020     // Start the AD conversion
                 ; 0001 0021     ADCSRA|=0x40;
0001c2 9a36      	SBI  0x6,6
                 ; 0001 0022     // Wait for the AD conversion to complete
                 ; 0001 0023     while ((ADCSRA & 0x10)==0);
                 _0x20003:
0001c3 9b34      	SBIS 0x6,4
0001c4 cffe      	RJMP _0x20003
                 ; 0001 0024     ADCSRA|=0x10;
0001c5 9a34      	SBI  0x6,4
                 ; 0001 0025     return ADCW;
0001c6 b1e4      	IN   R30,0x4
0001c7 b1f5      	IN   R31,0x4+1
0001c8 c028      	RJMP _0x2060002
                 ; 0001 0026 }
                 ;
                 ;unsigned int readSensor(char si)
                 ; 0001 0029 {
                 _readSensor:
                 ; 0001 002A unsigned int ret;
                 ; 0001 002B switch(si)
0001c9 931a      	ST   -Y,R17
0001ca 930a      	ST   -Y,R16
                 ;	si -> Y+2
                 ;	ret -> R16,R17
0001cb 81ea      	LDD  R30,Y+2
0001cc e0f0      	LDI  R31,0
                 ; 0001 002C {
                 ; 0001 002D case FRONT_SENSOR:
0001cd 9730      	SBIW R30,0
0001ce f429      	BRNE _0x20009
                 ; 0001 002E PORTB.5=1;
0001cf 9ac5      	SBI  0x18,5
                 ; 0001 002F delay_us(50);
0001d0 940e 039e 	CALL SUBOPT_0x3
                 ; 0001 0030 ret=read_adc(si);
                 ; 0001 0031 PORTB.5=0;
0001d2 98c5      	CBI  0x18,5
                 ; 0001 0032 break;
0001d3 c011      	RJMP _0x20008
                 ; 0001 0033 case LEFT_SENSOR:
                 _0x20009:
0001d4 30e1      	CPI  R30,LOW(0x1)
0001d5 e0a0      	LDI  R26,HIGH(0x1)
0001d6 07fa      	CPC  R31,R26
0001d7 f429      	BRNE _0x2000E
                 ; 0001 0034 PORTB.6=1;
0001d8 9ac6      	SBI  0x18,6
                 ; 0001 0035 delay_us(50);
0001d9 940e 039e 	CALL SUBOPT_0x3
                 ; 0001 0036 ret=read_adc(si);
                 ; 0001 0037 PORTB.6=0;
0001db 98c6      	CBI  0x18,6
                 ; 0001 0038 break;
0001dc c008      	RJMP _0x20008
                 ; 0001 0039 case RIGHT_SENSOR:
                 _0x2000E:
0001dd 30e2      	CPI  R30,LOW(0x2)
0001de e0a0      	LDI  R26,HIGH(0x2)
0001df 07fa      	CPC  R31,R26
0001e0 f421      	BRNE _0x20008
                 ; 0001 003A PORTB.7=1;
0001e1 9ac7      	SBI  0x18,7
                 ; 0001 003B delay_us(50);
0001e2 940e 039e 	CALL SUBOPT_0x3
                 ; 0001 003C ret=read_adc(si);
                 ; 0001 003D PORTB.7=0;
0001e4 98c7      	CBI  0x18,7
                 ; 0001 003E break;
                 ; 0001 003F }
                 _0x20008:
                 ; 0001 0040 return ret;
0001e5 01f8      	MOVW R30,R16
0001e6 8119      	LDD  R17,Y+1
0001e7 8108      	LDD  R16,Y+0
0001e8 940c 020d 	JMP  _0x2060001
                 ; 0001 0041 }
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "UART.h"
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;void putchar(char c){
                 ; 0002 0005 void putchar(char c){
                 
                 	.CSEG
                 _putchar:
                 ; 0002 0006     while((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 ;	c -> Y+0
                 _0x40003:
0001ea 91e0 009b 	LDS  R30,155
0001ec 72e0      	ANDI R30,LOW(0x20)
0001ed f3e1      	BREQ _0x40003
                 ; 0002 0007     UDR1=c;
0001ee 81e8      	LD   R30,Y
0001ef 93e0 009c 	STS  156,R30
                 ; 0002 0008 }
                 _0x2060002:
0001f1 9621      	ADIW R28,1
0001f2 9508      	RET
                 ;
                 ;// Read a character from the USART1 Receiver
                 ;
                 ;
                 ;
                 ;unsigned char getchar(void){
                 ; 0002 000E unsigned char getchar(void){
                 ; 0002 000F     while((UCSR1A & RX_COMPLETE)==0);
                 ; 0002 0010     return UDR1;
                 ; 0002 0011 }
                 ;
                 ;
                 ;
                 ;void InitializeUART(void){
                 ; 0002 0015 void InitializeUART(void){
                 _InitializeUART:
                 ; 0002 0016     // USART1 initialization
                 ; 0002 0017     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0002 0018     // USART1 Receiver: On
                 ; 0002 0019     // USART1 Transmitter: On
                 ; 0002 001A     // USART1 Mode: Asynchronous
                 ; 0002 001B     // USART1 Baud Rate: 9600
                 ; 0002 001C     UCSR1A=0x00;
0001f3 e0e0      	LDI  R30,LOW(0)
0001f4 93e0 009b 	STS  155,R30
                 ; 0002 001D     UCSR1B=0x18;
0001f6 e1e8      	LDI  R30,LOW(24)
0001f7 93e0 009a 	STS  154,R30
                 ; 0002 001E     UCSR1C=0x06;
0001f9 e0e6      	LDI  R30,LOW(6)
0001fa 93e0 009d 	STS  157,R30
                 ; 0002 001F     UBRR1H=0x00;
0001fc e0e0      	LDI  R30,LOW(0)
0001fd 93e0 0098 	STS  152,R30
                 ; 0002 0020     UBRR1L=0x67;
0001ff e6e7      	LDI  R30,LOW(103)
000200 93e0 0099 	STS  153,R30
                 ; 0002 0021 }
000202 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G100:
000203 81ea      	LDD  R30,Y+2
000204 93ea      	ST   -Y,R30
000205 dfe4      	RCALL _putchar
000206 81a8      	LD   R26,Y
000207 81b9      	LDD  R27,Y+1
000208 91ed      	LD   R30,X+
000209 91fd      	LD   R31,X+
00020a 9631      	ADIW R30,1
00020b 93fe      	ST   -X,R31
00020c 93ee      	ST   -X,R30
                 _0x2060001:
00020d 9623      	ADIW R28,3
00020e 9508      	RET
                 __print_G100:
00020f 9726      	SBIW R28,6
000210 940e 04e0 	CALL __SAVELOCR6
000212 e010      	LDI  R17,0
000213 85ac      	LDD  R26,Y+12
000214 85bd      	LDD  R27,Y+12+1
000215 e0e0      	LDI  R30,LOW(0)
000216 e0f0      	LDI  R31,HIGH(0)
000217 93ed      	ST   X+,R30
000218 93fc      	ST   X,R31
                 _0x2000016:
000219 89ea      	LDD  R30,Y+18
00021a 89fb      	LDD  R31,Y+18+1
00021b 9631      	ADIW R30,1
00021c 8bea      	STD  Y+18,R30
00021d 8bfb      	STD  Y+18+1,R31
00021e 9731      	SBIW R30,1
00021f 91e4      	LPM  R30,Z
000220 2f2e      	MOV  R18,R30
000221 30e0      	CPI  R30,0
000222 f411      	BRNE PC+3
000223 940c 033c 	JMP _0x2000018
000225 2fe1      	MOV  R30,R17
000226 30e0      	CPI  R30,0
000227 f439      	BRNE _0x200001C
000228 3225      	CPI  R18,37
000229 f411      	BRNE _0x200001D
00022a e011      	LDI  R17,LOW(1)
00022b c002      	RJMP _0x200001E
                 _0x200001D:
00022c 940e 03a8 	CALL SUBOPT_0x4
                 _0x200001E:
00022e c10c      	RJMP _0x200001B
                 _0x200001C:
00022f 30e1      	CPI  R30,LOW(0x1)
000230 f4a9      	BRNE _0x200001F
000231 3225      	CPI  R18,37
000232 f419      	BRNE _0x2000020
000233 940e 03a8 	CALL SUBOPT_0x4
000235 c104      	RJMP _0x20000C9
                 _0x2000020:
000236 e012      	LDI  R17,LOW(2)
000237 e040      	LDI  R20,LOW(0)
000238 e000      	LDI  R16,LOW(0)
000239 322d      	CPI  R18,45
00023a f411      	BRNE _0x2000021
00023b e001      	LDI  R16,LOW(1)
00023c c0fe      	RJMP _0x200001B
                 _0x2000021:
00023d 322b      	CPI  R18,43
00023e f411      	BRNE _0x2000022
00023f e24b      	LDI  R20,LOW(43)
000240 c0fa      	RJMP _0x200001B
                 _0x2000022:
000241 3220      	CPI  R18,32
000242 f411      	BRNE _0x2000023
000243 e240      	LDI  R20,LOW(32)
000244 c0f6      	RJMP _0x200001B
                 _0x2000023:
000245 c002      	RJMP _0x2000024
                 _0x200001F:
000246 30e2      	CPI  R30,LOW(0x2)
000247 f439      	BRNE _0x2000025
                 _0x2000024:
000248 e050      	LDI  R21,LOW(0)
000249 e013      	LDI  R17,LOW(3)
00024a 3320      	CPI  R18,48
00024b f411      	BRNE _0x2000026
00024c 6800      	ORI  R16,LOW(128)
00024d c0ed      	RJMP _0x200001B
                 _0x2000026:
00024e c004      	RJMP _0x2000027
                 _0x2000025:
00024f 30e3      	CPI  R30,LOW(0x3)
000250 f011      	BREQ PC+3
000251 940c 033b 	JMP _0x200001B
                 _0x2000027:
000253 3320      	CPI  R18,48
000254 f010      	BRLO _0x200002A
000255 332a      	CPI  R18,58
000256 f008      	BRLO _0x200002B
                 _0x200002A:
000257 c007      	RJMP _0x2000029
                 _0x200002B:
000258 e0aa      	LDI  R26,LOW(10)
000259 9f5a      	MUL  R21,R26
00025a 2d50      	MOV  R21,R0
00025b 2fe2      	MOV  R30,R18
00025c 53e0      	SUBI R30,LOW(48)
00025d 0f5e      	ADD  R21,R30
00025e c0dc      	RJMP _0x200001B
                 _0x2000029:
00025f 2fe2      	MOV  R30,R18
000260 36e3      	CPI  R30,LOW(0x63)
000261 f449      	BRNE _0x200002F
000262 940e 03b1 	CALL SUBOPT_0x5
000264 89e8      	LDD  R30,Y+16
000265 89f9      	LDD  R31,Y+16+1
000266 81a4      	LDD  R26,Z+4
000267 93aa      	ST   -Y,R26
000268 940e 03b7 	CALL SUBOPT_0x6
00026a c0cf      	RJMP _0x2000030
                 _0x200002F:
00026b 37e3      	CPI  R30,LOW(0x73)
00026c f441      	BRNE _0x2000032
00026d 940e 03b1 	CALL SUBOPT_0x5
00026f 940e 03bf 	CALL SUBOPT_0x7
000271 940e 036b 	CALL _strlen
000273 2f1e      	MOV  R17,R30
000274 c00a      	RJMP _0x2000033
                 _0x2000032:
000275 37e0      	CPI  R30,LOW(0x70)
000276 f461      	BRNE _0x2000035
000277 940e 03b1 	CALL SUBOPT_0x5
000279 940e 03bf 	CALL SUBOPT_0x7
00027b 940e 0375 	CALL _strlenf
00027d 2f1e      	MOV  R17,R30
00027e 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00027f 6002      	ORI  R16,LOW(2)
000280 770f      	ANDI R16,LOW(127)
000281 e030      	LDI  R19,LOW(0)
000282 c035      	RJMP _0x2000036
                 _0x2000035:
000283 36e4      	CPI  R30,LOW(0x64)
000284 f011      	BREQ _0x2000039
000285 36e9      	CPI  R30,LOW(0x69)
000286 f411      	BRNE _0x200003A
                 _0x2000039:
000287 6004      	ORI  R16,LOW(4)
000288 c002      	RJMP _0x200003B
                 _0x200003A:
000289 37e5      	CPI  R30,LOW(0x75)
00028a f431      	BRNE _0x200003C
                 _0x200003B:
00028b e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00028c e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00028d 83ee      	STD  Y+6,R30
00028e 83ff      	STD  Y+6+1,R31
00028f e015      	LDI  R17,LOW(5)
000290 c00d      	RJMP _0x200003D
                 _0x200003C:
000291 35e8      	CPI  R30,LOW(0x58)
000292 f411      	BRNE _0x200003F
000293 6008      	ORI  R16,LOW(8)
000294 c004      	RJMP _0x2000040
                 _0x200003F:
000295 37e8      	CPI  R30,LOW(0x78)
000296 f011      	BREQ PC+3
000297 940c 033a 	JMP _0x2000071
                 _0x2000040:
000299 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
00029a e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00029b 83ee      	STD  Y+6,R30
00029c 83ff      	STD  Y+6+1,R31
00029d e014      	LDI  R17,LOW(4)
                 _0x200003D:
00029e ff02      	SBRS R16,2
00029f c014      	RJMP _0x2000042
0002a0 940e 03b1 	CALL SUBOPT_0x5
0002a2 940e 03c9 	CALL SUBOPT_0x8
0002a4 85ab      	LDD  R26,Y+11
0002a5 23aa      	TST  R26
0002a6 f43a      	BRPL _0x2000043
0002a7 85ea      	LDD  R30,Y+10
0002a8 85fb      	LDD  R31,Y+10+1
0002a9 940e 049c 	CALL __ANEGW1
0002ab 87ea      	STD  Y+10,R30
0002ac 87fb      	STD  Y+10+1,R31
0002ad e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0002ae 3040      	CPI  R20,0
0002af f011      	BREQ _0x2000044
0002b0 5f1f      	SUBI R17,-LOW(1)
0002b1 c001      	RJMP _0x2000045
                 _0x2000044:
0002b2 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0002b3 c004      	RJMP _0x2000046
                 _0x2000042:
0002b4 940e 03b1 	CALL SUBOPT_0x5
0002b6 940e 03c9 	CALL SUBOPT_0x8
                 _0x2000046:
                 _0x2000036:
0002b8 fd00      	SBRC R16,0
0002b9 c011      	RJMP _0x2000047
                 _0x2000048:
0002ba 1715      	CP   R17,R21
0002bb f478      	BRSH _0x200004A
0002bc ff07      	SBRS R16,7
0002bd c008      	RJMP _0x200004B
0002be ff02      	SBRS R16,2
0002bf c004      	RJMP _0x200004C
0002c0 7f0b      	ANDI R16,LOW(251)
0002c1 2f24      	MOV  R18,R20
0002c2 5011      	SUBI R17,LOW(1)
0002c3 c001      	RJMP _0x200004D
                 _0x200004C:
0002c4 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0002c5 c001      	RJMP _0x200004E
                 _0x200004B:
0002c6 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0002c7 940e 03a8 	CALL SUBOPT_0x4
0002c9 5051      	SUBI R21,LOW(1)
0002ca cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0002cb 2f31      	MOV  R19,R17
0002cc ff01      	SBRS R16,1
0002cd c017      	RJMP _0x200004F
                 _0x2000050:
0002ce 3030      	CPI  R19,0
0002cf f0a1      	BREQ _0x2000052
0002d0 ff03      	SBRS R16,3
0002d1 c006      	RJMP _0x2000053
0002d2 81ee      	LDD  R30,Y+6
0002d3 81ff      	LDD  R31,Y+6+1
0002d4 9125      	LPM  R18,Z+
0002d5 83ee      	STD  Y+6,R30
0002d6 83ff      	STD  Y+6+1,R31
0002d7 c005      	RJMP _0x2000054
                 _0x2000053:
0002d8 81ae      	LDD  R26,Y+6
0002d9 81bf      	LDD  R27,Y+6+1
0002da 912d      	LD   R18,X+
0002db 83ae      	STD  Y+6,R26
0002dc 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0002dd 940e 03a8 	CALL SUBOPT_0x4
0002df 3050      	CPI  R21,0
0002e0 f009      	BREQ _0x2000055
0002e1 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0002e2 5031      	SUBI R19,LOW(1)
0002e3 cfea      	RJMP _0x2000050
                 _0x2000052:
0002e4 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0002e5 e320      	LDI  R18,LOW(48)
0002e6 81ee      	LDD  R30,Y+6
0002e7 81ff      	LDD  R31,Y+6+1
0002e8 940e 04cd 	CALL __GETW1PF
0002ea 87e8      	STD  Y+8,R30
0002eb 87f9      	STD  Y+8+1,R31
0002ec 81ee      	LDD  R30,Y+6
0002ed 81ff      	LDD  R31,Y+6+1
0002ee 9632      	ADIW R30,2
0002ef 83ee      	STD  Y+6,R30
0002f0 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0002f1 85e8      	LDD  R30,Y+8
0002f2 85f9      	LDD  R31,Y+8+1
0002f3 85aa      	LDD  R26,Y+10
0002f4 85bb      	LDD  R27,Y+10+1
0002f5 17ae      	CP   R26,R30
0002f6 07bf      	CPC  R27,R31
0002f7 f050      	BRLO _0x200005C
0002f8 5f2f      	SUBI R18,-LOW(1)
0002f9 85a8      	LDD  R26,Y+8
0002fa 85b9      	LDD  R27,Y+8+1
0002fb 85ea      	LDD  R30,Y+10
0002fc 85fb      	LDD  R31,Y+10+1
0002fd 1bea      	SUB  R30,R26
0002fe 0bfb      	SBC  R31,R27
0002ff 87ea      	STD  Y+10,R30
000300 87fb      	STD  Y+10+1,R31
000301 cfef      	RJMP _0x200005A
                 _0x200005C:
000302 332a      	CPI  R18,58
000303 f028      	BRLO _0x200005D
000304 ff03      	SBRS R16,3
000305 c002      	RJMP _0x200005E
000306 5f29      	SUBI R18,-LOW(7)
000307 c001      	RJMP _0x200005F
                 _0x200005E:
000308 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000309 fd04      	SBRC R16,4
00030a c01a      	RJMP _0x2000061
00030b 3321      	CPI  R18,49
00030c f420      	BRSH _0x2000063
00030d 85a8      	LDD  R26,Y+8
00030e 85b9      	LDD  R27,Y+8+1
00030f 9711      	SBIW R26,1
000310 f409      	BRNE _0x2000062
                 _0x2000063:
000311 c009      	RJMP _0x20000CA
                 _0x2000062:
000312 1753      	CP   R21,R19
000313 f010      	BRLO _0x2000067
000314 ff00      	SBRS R16,0
000315 c001      	RJMP _0x2000068
                 _0x2000067:
000316 c013      	RJMP _0x2000066
                 _0x2000068:
000317 e220      	LDI  R18,LOW(32)
000318 ff07      	SBRS R16,7
000319 c00b      	RJMP _0x2000069
00031a e320      	LDI  R18,LOW(48)
                 _0x20000CA:
00031b 6100      	ORI  R16,LOW(16)
00031c ff02      	SBRS R16,2
00031d c007      	RJMP _0x200006A
00031e 7f0b      	ANDI R16,LOW(251)
00031f 934a      	ST   -Y,R20
000320 940e 03b7 	CALL SUBOPT_0x6
000322 3050      	CPI  R21,0
000323 f009      	BREQ _0x200006B
000324 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000325 940e 03a8 	CALL SUBOPT_0x4
000327 3050      	CPI  R21,0
000328 f009      	BREQ _0x200006C
000329 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00032a 5031      	SUBI R19,LOW(1)
00032b 85a8      	LDD  R26,Y+8
00032c 85b9      	LDD  R27,Y+8+1
00032d 9712      	SBIW R26,2
00032e f008      	BRLO _0x2000059
00032f cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000330 ff00      	SBRS R16,0
000331 c008      	RJMP _0x200006D
                 _0x200006E:
000332 3050      	CPI  R21,0
000333 f031      	BREQ _0x2000070
000334 5051      	SUBI R21,LOW(1)
000335 e2e0      	LDI  R30,LOW(32)
000336 93ea      	ST   -Y,R30
000337 940e 03b7 	CALL SUBOPT_0x6
000339 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
00033a e010      	LDI  R17,LOW(0)
                 _0x200001B:
00033b cedd      	RJMP _0x2000016
                 _0x2000018:
00033c 85ac      	LDD  R26,Y+12
00033d 85bd      	LDD  R27,Y+12+1
00033e 940e 04c9 	CALL __GETW1P
000340 940e 04e7 	CALL __LOADLOCR6
000342 9664      	ADIW R28,20
000343 9508      	RET
                 _printf:
000344 92ff      	PUSH R15
000345 2ef8      	MOV  R15,R24
000346 9726      	SBIW R28,6
000347 931a      	ST   -Y,R17
000348 930a      	ST   -Y,R16
000349 01de      	MOVW R26,R28
00034a 9614      	ADIW R26,4
00034b 940e 0498 	CALL __ADDW2R15
00034d 018d      	MOVW R16,R26
00034e e0e0      	LDI  R30,LOW(0)
00034f 83ec      	STD  Y+4,R30
000350 83ed      	STD  Y+4+1,R30
000351 83ee      	STD  Y+6,R30
000352 83ef      	STD  Y+6+1,R30
000353 01de      	MOVW R26,R28
000354 9618      	ADIW R26,8
000355 940e 0498 	CALL __ADDW2R15
000357 940e 04c9 	CALL __GETW1P
000359 93fa      	ST   -Y,R31
00035a 93ea      	ST   -Y,R30
00035b 931a      	ST   -Y,R17
00035c 930a      	ST   -Y,R16
00035d e0e3      	LDI  R30,LOW(_put_usart_G100)
00035e e0f2      	LDI  R31,HIGH(_put_usart_G100)
00035f 93fa      	ST   -Y,R31
000360 93ea      	ST   -Y,R30
000361 01fe      	MOVW R30,R28
000362 9638      	ADIW R30,8
000363 93fa      	ST   -Y,R31
000364 93ea      	ST   -Y,R30
000365 dea9      	RCALL __print_G100
000366 8119      	LDD  R17,Y+1
000367 8108      	LDD  R16,Y+0
000368 9628      	ADIW R28,8
000369 90ff      	POP  R15
00036a 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
00036b 91a9          ld   r26,y+
00036c 91b9          ld   r27,y+
00036d 27ee          clr  r30
00036e 27ff          clr  r31
                 strlen0:
00036f 916d          ld   r22,x+
000370 2366          tst  r22
000371 f011          breq strlen1
000372 9631          adiw r30,1
000373 cffb          rjmp strlen0
                 strlen1:
000374 9508          ret
                 _strlenf:
000375 27aa          clr  r26
000376 27bb          clr  r27
000377 91e9          ld   r30,y+
000378 91f9          ld   r31,y+
                 strlenf0:
000379 9005      	lpm  r0,z+
00037a 2000          tst  r0
00037b f011          breq strlenf1
00037c 9611          adiw r26,1
00037d cffb          rjmp strlenf0
                 strlenf1:
00037e 01fd          movw r30,r26
00037f 9508          ret
                 
                 	.DSEG
                 _rotateR:
000500           	.BYTE 0x8
                 _rotateL:
000508           	.BYTE 0x8
                 _Information:
000510           	.BYTE 0x4
                 _Flag:
000514           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
000380 920a      	ST   -Y,R0
000381 921a      	ST   -Y,R1
000382 939a      	ST   -Y,R25
000383 93aa      	ST   -Y,R26
000384 93ba      	ST   -Y,R27
000385 93ea      	ST   -Y,R30
000386 93fa      	ST   -Y,R31
000387 b7ef      	IN   R30,SREG
000388 93ea      	ST   -Y,R30
000389 2ded      	MOV  R30,R13
00038a e0f0      	LDI  R31,0
00038b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
00038c b202      	IN   R0,18
00038d e0a8      	LDI  R26,LOW(_rotateL)
00038e e0b5      	LDI  R27,HIGH(_rotateL)
00038f 0da4      	ADD  R26,R4
000390 1db5      	ADC  R27,R5
000391 91ec      	LD   R30,X
000392 95e2      	SWAP R30
000393 7fe0      	ANDI R30,0xF0
000394 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
000395 b003      	IN   R0,3
000396 e0a0      	LDI  R26,LOW(_rotateR)
000397 e0b5      	LDI  R27,HIGH(_rotateR)
000398 0da6      	ADD  R26,R6
000399 1db7      	ADC  R27,R7
00039a 91ec      	LD   R30,X
00039b 95e2      	SWAP R30
00039c 7fe0      	ANDI R30,0xF0
00039d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
                +
00039e ec88     +LDI R24 , LOW ( 200 )
00039f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003a0 9701     +SBIW R24 , 1
0003a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003a2 81ea      	LDD  R30,Y+2
0003a3 93ea      	ST   -Y,R30
0003a4 940e 01bc 	CALL _read_adc
0003a6 018f      	MOVW R16,R30
0003a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4:
0003a8 932a      	ST   -Y,R18
0003a9 85ed      	LDD  R30,Y+13
0003aa 85fe      	LDD  R31,Y+13+1
0003ab 93fa      	ST   -Y,R31
0003ac 93ea      	ST   -Y,R30
0003ad 89e9      	LDD  R30,Y+17
0003ae 89fa      	LDD  R31,Y+17+1
0003af 9509      	ICALL
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0003b1 89e8      	LDD  R30,Y+16
0003b2 89f9      	LDD  R31,Y+16+1
0003b3 9734      	SBIW R30,4
0003b4 8be8      	STD  Y+16,R30
0003b5 8bf9      	STD  Y+16+1,R31
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0003b7 85ed      	LDD  R30,Y+13
0003b8 85fe      	LDD  R31,Y+13+1
0003b9 93fa      	ST   -Y,R31
0003ba 93ea      	ST   -Y,R30
0003bb 89e9      	LDD  R30,Y+17
0003bc 89fa      	LDD  R31,Y+17+1
0003bd 9509      	ICALL
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
0003bf 89a8      	LDD  R26,Y+16
0003c0 89b9      	LDD  R27,Y+16+1
0003c1 9614      	ADIW R26,4
0003c2 940e 04c9 	CALL __GETW1P
0003c4 83ee      	STD  Y+6,R30
0003c5 83ff      	STD  Y+6+1,R31
0003c6 93fa      	ST   -Y,R31
0003c7 93ea      	ST   -Y,R30
0003c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003c9 89a8      	LDD  R26,Y+16
0003ca 89b9      	LDD  R27,Y+16+1
0003cb 9614      	ADIW R26,4
0003cc 940e 04c9 	CALL __GETW1P
0003ce 87ea      	STD  Y+10,R30
0003cf 87fb      	STD  Y+10+1,R31
0003d0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003d1 91e9      	ld   r30,y+
0003d2 91f9      	ld   r31,y+
0003d3 9630      	adiw r30,0
0003d4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003d5 ea80     +LDI R24 , LOW ( 0xFA0 )
0003d6 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0003d7 9701     +SBIW R24 , 1
0003d8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0003d9 95a8      	wdr
0003da 9731      	sbiw r30,1
0003db f7c9      	brne __delay_ms0
                 __delay_ms1:
0003dc 9508      	ret
                 
                 __ROUND_REPACK:
0003dd 2355      	TST  R21
0003de f442      	BRPL __REPACK
0003df 3850      	CPI  R21,0x80
0003e0 f411      	BRNE __ROUND_REPACK0
0003e1 ffe0      	SBRS R30,0
0003e2 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003e3 9631      	ADIW R30,1
0003e4 1f69      	ADC  R22,R25
0003e5 1f79      	ADC  R23,R25
0003e6 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003e7 e850      	LDI  R21,0x80
0003e8 2757      	EOR  R21,R23
0003e9 f411      	BRNE __REPACK0
0003ea 935f      	PUSH R21
0003eb c055      	RJMP __ZERORES
                 __REPACK0:
0003ec 3f5f      	CPI  R21,0xFF
0003ed f031      	BREQ __REPACK1
0003ee 0f66      	LSL  R22
0003ef 0c00      	LSL  R0
0003f0 9557      	ROR  R21
0003f1 9567      	ROR  R22
0003f2 2f75      	MOV  R23,R21
0003f3 9508      	RET
                 __REPACK1:
0003f4 935f      	PUSH R21
0003f5 2000      	TST  R0
0003f6 f00a      	BRMI __REPACK2
0003f7 c055      	RJMP __MAXRES
                 __REPACK2:
0003f8 c04e      	RJMP __MINRES
                 
                 __UNPACK:
0003f9 e850      	LDI  R21,0x80
0003fa 2e19      	MOV  R1,R25
0003fb 2215      	AND  R1,R21
0003fc 0f88      	LSL  R24
0003fd 1f99      	ROL  R25
0003fe 2795      	EOR  R25,R21
0003ff 0f55      	LSL  R21
000400 9587      	ROR  R24
                 
                 __UNPACK1:
000401 e850      	LDI  R21,0x80
000402 2e07      	MOV  R0,R23
000403 2205      	AND  R0,R21
000404 0f66      	LSL  R22
000405 1f77      	ROL  R23
000406 2775      	EOR  R23,R21
000407 0f55      	LSL  R21
000408 9567      	ROR  R22
000409 9508      	RET
                 
                 __CFD1U:
00040a 9468      	SET
00040b c001      	RJMP __CFD1U0
                 __CFD1:
00040c 94e8      	CLT
                 __CFD1U0:
00040d 935f      	PUSH R21
00040e dff2      	RCALL __UNPACK1
00040f 3870      	CPI  R23,0x80
000410 f018      	BRLO __CFD10
000411 3f7f      	CPI  R23,0xFF
000412 f408      	BRCC __CFD10
000413 c02d      	RJMP __ZERORES
                 __CFD10:
000414 e156      	LDI  R21,22
000415 1b57      	SUB  R21,R23
000416 f4aa      	BRPL __CFD11
000417 9551      	NEG  R21
000418 3058      	CPI  R21,8
000419 f40e      	BRTC __CFD19
00041a 3059      	CPI  R21,9
                 __CFD19:
00041b f030      	BRLO __CFD17
00041c efef      	SER  R30
00041d efff      	SER  R31
00041e ef6f      	SER  R22
00041f e77f      	LDI  R23,0x7F
000420 f977      	BLD  R23,7
000421 c01a      	RJMP __CFD15
                 __CFD17:
000422 2777      	CLR  R23
000423 2355      	TST  R21
000424 f0b9      	BREQ __CFD15
                 __CFD18:
000425 0fee      	LSL  R30
000426 1fff      	ROL  R31
000427 1f66      	ROL  R22
000428 1f77      	ROL  R23
000429 955a      	DEC  R21
00042a f7d1      	BRNE __CFD18
00042b c010      	RJMP __CFD15
                 __CFD11:
00042c 2777      	CLR  R23
                 __CFD12:
00042d 3058      	CPI  R21,8
00042e f028      	BRLO __CFD13
00042f 2fef      	MOV  R30,R31
000430 2ff6      	MOV  R31,R22
000431 2f67      	MOV  R22,R23
000432 5058      	SUBI R21,8
000433 cff9      	RJMP __CFD12
                 __CFD13:
000434 2355      	TST  R21
000435 f031      	BREQ __CFD15
                 __CFD14:
000436 9576      	LSR  R23
000437 9567      	ROR  R22
000438 95f7      	ROR  R31
000439 95e7      	ROR  R30
00043a 955a      	DEC  R21
00043b f7d1      	BRNE __CFD14
                 __CFD15:
00043c 2000      	TST  R0
00043d f40a      	BRPL __CFD16
00043e d061      	RCALL __ANEGD1
                 __CFD16:
00043f 915f      	POP  R21
000440 9508      	RET
                 
                 __ZERORES:
000441 27ee      	CLR  R30
000442 27ff      	CLR  R31
000443 2766      	CLR  R22
000444 2777      	CLR  R23
000445 915f      	POP  R21
000446 9508      	RET
                 
                 __MINRES:
000447 efef      	SER  R30
000448 efff      	SER  R31
000449 e76f      	LDI  R22,0x7F
00044a ef7f      	SER  R23
00044b 915f      	POP  R21
00044c 9508      	RET
                 
                 __MAXRES:
00044d efef      	SER  R30
00044e efff      	SER  R31
00044f e76f      	LDI  R22,0x7F
000450 e77f      	LDI  R23,0x7F
000451 915f      	POP  R21
000452 9508      	RET
                 
                 __DIVF21:
000453 935f      	PUSH R21
000454 dfa4      	RCALL __UNPACK
000455 3870      	CPI  R23,0x80
000456 f421      	BRNE __DIVF210
000457 2011      	TST  R1
                 __DIVF211:
000458 f40a      	BRPL __DIVF219
000459 cfed      	RJMP __MINRES
                 __DIVF219:
00045a cff2      	RJMP __MAXRES
                 __DIVF210:
00045b 3890      	CPI  R25,0x80
00045c f409      	BRNE __DIVF218
                 __DIVF217:
00045d cfe3      	RJMP __ZERORES
                 __DIVF218:
00045e 2401      	EOR  R0,R1
00045f 9408      	SEC
000460 0b97      	SBC  R25,R23
000461 f41b      	BRVC __DIVF216
000462 f3d4      	BRLT __DIVF217
000463 2000      	TST  R0
000464 cff3      	RJMP __DIVF211
                 __DIVF216:
000465 2f79      	MOV  R23,R25
000466 931f      	PUSH R17
000467 932f      	PUSH R18
000468 933f      	PUSH R19
000469 934f      	PUSH R20
00046a 2411      	CLR  R1
00046b 2711      	CLR  R17
00046c 2722      	CLR  R18
00046d 2733      	CLR  R19
00046e 2744      	CLR  R20
00046f 2755      	CLR  R21
000470 e290      	LDI  R25,32
                 __DIVF212:
000471 17ae      	CP   R26,R30
000472 07bf      	CPC  R27,R31
000473 0786      	CPC  R24,R22
000474 0741      	CPC  R20,R17
000475 f030      	BRLO __DIVF213
000476 1bae      	SUB  R26,R30
000477 0bbf      	SBC  R27,R31
000478 0b86      	SBC  R24,R22
000479 0b41      	SBC  R20,R17
00047a 9408      	SEC
00047b c001      	RJMP __DIVF214
                 __DIVF213:
00047c 9488      	CLC
                 __DIVF214:
00047d 1f55      	ROL  R21
00047e 1f22      	ROL  R18
00047f 1f33      	ROL  R19
000480 1c11      	ROL  R1
000481 1faa      	ROL  R26
000482 1fbb      	ROL  R27
000483 1f88      	ROL  R24
000484 1f44      	ROL  R20
000485 959a      	DEC  R25
000486 f751      	BRNE __DIVF212
000487 01f9      	MOVW R30,R18
000488 2d61      	MOV  R22,R1
000489 914f      	POP  R20
00048a 913f      	POP  R19
00048b 912f      	POP  R18
00048c 911f      	POP  R17
00048d 2366      	TST  R22
00048e f032      	BRMI __DIVF215
00048f 0f55      	LSL  R21
000490 1fee      	ROL  R30
000491 1fff      	ROL  R31
000492 1f66      	ROL  R22
000493 957a      	DEC  R23
000494 f243      	BRVS __DIVF217
                 __DIVF215:
000495 df47      	RCALL __ROUND_REPACK
000496 915f      	POP  R21
000497 9508      	RET
                 
                 __ADDW2R15:
000498 2400      	CLR  R0
000499 0daf      	ADD  R26,R15
00049a 1db0      	ADC  R27,R0
00049b 9508      	RET
                 
                 __ANEGW1:
00049c 95f1      	NEG  R31
00049d 95e1      	NEG  R30
00049e 40f0      	SBCI R31,0
00049f 9508      	RET
                 
                 __ANEGD1:
0004a0 95f0      	COM  R31
0004a1 9560      	COM  R22
0004a2 9570      	COM  R23
0004a3 95e1      	NEG  R30
0004a4 4fff      	SBCI R31,-1
0004a5 4f6f      	SBCI R22,-1
0004a6 4f7f      	SBCI R23,-1
0004a7 9508      	RET
                 
                 __DIVW21U:
0004a8 2400      	CLR  R0
0004a9 2411      	CLR  R1
0004aa e190      	LDI  R25,16
                 __DIVW21U1:
0004ab 0faa      	LSL  R26
0004ac 1fbb      	ROL  R27
0004ad 1c00      	ROL  R0
0004ae 1c11      	ROL  R1
0004af 1a0e      	SUB  R0,R30
0004b0 0a1f      	SBC  R1,R31
0004b1 f418      	BRCC __DIVW21U2
0004b2 0e0e      	ADD  R0,R30
0004b3 1e1f      	ADC  R1,R31
0004b4 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004b5 60a1      	SBR  R26,1
                 __DIVW21U3:
0004b6 959a      	DEC  R25
0004b7 f799      	BRNE __DIVW21U1
0004b8 01fd      	MOVW R30,R26
0004b9 01d0      	MOVW R26,R0
0004ba 9508      	RET
                 
                 __MODW21:
0004bb 94e8      	CLT
0004bc ffb7      	SBRS R27,7
0004bd c004      	RJMP __MODW211
0004be 95a0      	COM  R26
0004bf 95b0      	COM  R27
0004c0 9611      	ADIW R26,1
0004c1 9468      	SET
                 __MODW211:
0004c2 fdf7      	SBRC R31,7
0004c3 dfd8      	RCALL __ANEGW1
0004c4 dfe3      	RCALL __DIVW21U
0004c5 01fd      	MOVW R30,R26
0004c6 f40e      	BRTC __MODW212
0004c7 dfd4      	RCALL __ANEGW1
                 __MODW212:
0004c8 9508      	RET
                 
                 __GETW1P:
0004c9 91ed      	LD   R30,X+
0004ca 91fc      	LD   R31,X
0004cb 9711      	SBIW R26,1
0004cc 9508      	RET
                 
                 __GETW1PF:
0004cd 9005      	LPM  R0,Z+
0004ce 91f4      	LPM  R31,Z
0004cf 2de0      	MOV  R30,R0
0004d0 9508      	RET
                 
                 __GETD1S0:
0004d1 81e8      	LD   R30,Y
0004d2 81f9      	LDD  R31,Y+1
0004d3 816a      	LDD  R22,Y+2
0004d4 817b      	LDD  R23,Y+3
0004d5 9508      	RET
                 
                 __PUTD1S0:
0004d6 83e8      	ST   Y,R30
0004d7 83f9      	STD  Y+1,R31
0004d8 836a      	STD  Y+2,R22
0004d9 837b      	STD  Y+3,R23
0004da 9508      	RET
                 
                 __PUTPARD1:
0004db 937a      	ST   -Y,R23
0004dc 936a      	ST   -Y,R22
0004dd 93fa      	ST   -Y,R31
0004de 93ea      	ST   -Y,R30
0004df 9508      	RET
                 
                 __SAVELOCR6:
0004e0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004e1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004e2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004e3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004e4 931a      	ST   -Y,R17
0004e5 930a      	ST   -Y,R16
0004e6 9508      	RET
                 
                 __LOADLOCR6:
0004e7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004e8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004e9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004ea 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004eb 8119      	LDD  R17,Y+1
0004ec 8108      	LD   R16,Y
0004ed 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  41 r1 :  14 r2 :   0 r3 :   0 r4 :  10 r5 :   3 r6 :  10 r7 :   3 
r8 :   1 r9 :   1 r10:   1 r11:   1 r12:   0 r13:   1 r14:   0 r15:   4 
r16:  34 r17:  26 r18:  32 r19:  12 r20:  15 r21:  55 r22:  29 r23:  30 
r24:  23 r25:  20 r26:  81 r27:  33 r28:  13 r29:   1 r30: 291 r31:  99 
x  :  15 y  : 159 z  :  13 
Registers used: 31 out of 35 (88.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   5 
adiw  :  21 and   :   6 andi  :  13 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  20 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   1 brmi  :   2 brne  :  42 brpl  :   5 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :  55 
cbi   :   3 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  29 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :   6 cpc   :  18 cpi   :  50 cpse  :   0 dec   :   7 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :  11 inc   :   0 jmp   :  40 ld    :  27 ldd   :  62 
ldi   : 119 lds   :   3 lpm   :  14 lsl   :   9 lsr   :   1 mov   :  23 
movw  :  28 mul   :   1 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   4 ori   :  10 out   :  39 pop   :  10 push  :   9 rcall :  12 
ret   :  38 reti  :   1 rjmp  :  75 rol   :  19 ror   :   7 sbc   :   6 
sbci  :   4 sbi   :   5 sbic  :   0 sbis  :   1 sbiw  :  17 sbr   :   1 
sbrc  :   3 sbrs  :  12 sec   :   2 seh   :   0 sei   :   1 sen   :   0 
ser   :   8 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  55 std   :  31 sts   :  32 sub   :   4 subi  :  18 
swap  :   2 tst   :  11 wdr   :   1 
Instructions used: 75 out of 117 (64.1%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009dc   2472     52   2524  131072   1.9%
[.dseg] 0x000100 0x000516      0     22     22    4351   0.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 6 warnings
